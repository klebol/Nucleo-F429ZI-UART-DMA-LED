
DMA_TESTING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000600c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006454  08006454  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800645c  0800645c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000944  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009b4  200009b4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fae  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e33  00000000  00000000  0003204e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00034e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf8  00000000  00000000  00035cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026591  00000000  00000000  000369d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127cf  00000000  00000000  0005cf61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc3aa  00000000  00000000  0006f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014bada  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004424  00000000  00000000  0014bb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080061a4 	.word	0x080061a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080061a4 	.word	0x080061a4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Led_BlinkRoutine>:
//
//Private Functions
//

void Led_BlinkRoutine(LedDiode_t* Diode)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint32_t Tick = HAL_GetTick();
 80005bc:	f001 f896 	bl	80016ec <HAL_GetTick>
 80005c0:	60f8      	str	r0, [r7, #12]
	if((Tick - Diode->LastTick) > Diode->BlinkDelay)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d90a      	bls.n	80005e8 <Led_BlinkRoutine+0x34>
	{
		HAL_GPIO_TogglePin(Diode->LedGPIO, Diode->LedPin);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68da      	ldr	r2, [r3, #12]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	8a1b      	ldrh	r3, [r3, #16]
 80005da:	4619      	mov	r1, r3
 80005dc:	4610      	mov	r0, r2
 80005de:	f002 fab6 	bl	8002b4e <HAL_GPIO_TogglePin>
		Diode->LastTick = Tick;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	609a      	str	r2, [r3, #8]
	}

}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Led_OnOff>:

void Led_OnOff(LedDiode_t* Diode)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Diode->LedGPIO, Diode->LedPin, Diode->LightStatus);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68d8      	ldr	r0, [r3, #12]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	8a19      	ldrh	r1, [r3, #16]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	789b      	ldrb	r3, [r3, #2]
 8000604:	461a      	mov	r2, r3
 8000606:	f002 fa89 	bl	8002b1c <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <Led_Init>:

//
//Init Function
//
void Led_Init(LedDiode_t* Diode, GPIO_TypeDef* GPIOx, uint16_t Pin)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	4613      	mov	r3, r2
 800061e:	80fb      	strh	r3, [r7, #6]
	Diode->LedGPIO = GPIOx;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	60da      	str	r2, [r3, #12]
	Diode->LedPin = Pin;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	88fa      	ldrh	r2, [r7, #6]
 800062a:	821a      	strh	r2, [r3, #16]
	Diode->LastTick = HAL_GetTick();
 800062c:	f001 f85e 	bl	80016ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	609a      	str	r2, [r3, #8]
	Diode->LightStatus = DIODE_OFF;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	709a      	strb	r2, [r3, #2]
	Diode->LastLightStatus = DIODE_OFF;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2200      	movs	r2, #0
 8000640:	705a      	strb	r2, [r3, #1]
	Diode->BlinkStatus = DIODE_OFF;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
	Diode->BlinkDelay = 1000;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064e:	605a      	str	r2, [r3, #4]

}
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Led_Routine>:

//
//Main Loop Routine
//
void Led_Routine(LedDiode_t *Diode)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if(Diode->BlinkStatus == DIODE_ON)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d103      	bne.n	8000670 <Led_Routine+0x18>
	{
		Led_BlinkRoutine(Diode);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ffa3 	bl	80005b4 <Led_BlinkRoutine>
		{
			Led_OnOff(Diode);
			Diode->LastLightStatus = Diode->LightStatus;
		}
	}
}
 800066e:	e010      	b.n	8000692 <Led_Routine+0x3a>
	else if(Diode->BlinkStatus == DIODE_OFF)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10c      	bne.n	8000692 <Led_Routine+0x3a>
		if(Diode->LightStatus != Diode->LastLightStatus)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	789a      	ldrb	r2, [r3, #2]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	429a      	cmp	r2, r3
 8000682:	d006      	beq.n	8000692 <Led_Routine+0x3a>
			Led_OnOff(Diode);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ffb3 	bl	80005f0 <Led_OnOff>
			Diode->LastLightStatus = Diode->LightStatus;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	789a      	ldrb	r2, [r3, #2]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	705a      	strb	r2, [r3, #1]
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <Led_SetLightStatus>:
//Setting Status Functions
//


void Led_SetLightStatus(LedDiode_t* Diode, uint8_t Status)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	460b      	mov	r3, r1
 80006a4:	70fb      	strb	r3, [r7, #3]
	Diode->LightStatus = Status;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	78fa      	ldrb	r2, [r7, #3]
 80006aa:	709a      	strb	r2, [r3, #2]
	Diode->BlinkStatus = DIODE_OFF;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <Led_SetBlinkStatus>:

void Led_SetBlinkStatus(LedDiode_t* Diode, uint8_t Status)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	70fb      	strb	r3, [r7, #3]
	Diode->BlinkStatus = Status;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	78fa      	ldrb	r2, [r7, #3]
 80006ce:	701a      	strb	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <Led_SetBlinkDelay>:

void Led_SetBlinkDelay(LedDiode_t* Diode, uint32_t Delay)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	Diode->BlinkDelay = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	605a      	str	r2, [r3, #4]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f4xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800070a:	3301      	adds	r3, #1
 800070c:	425a      	negs	r2, r3
 800070e:	f003 031f 	and.w	r3, r3, #31
 8000712:	f002 021f 	and.w	r2, r2, #31
 8000716:	bf58      	it	pl
 8000718:	4253      	negpl	r3, r2
 800071a:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000722:	7bfa      	ldrb	r2, [r7, #15]
 8000724:	429a      	cmp	r2, r3
 8000726:	d101      	bne.n	800072c <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	e00b      	b.n	8000744 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000732:	4619      	mov	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	78fa      	ldrb	r2, [r7, #3]
 8000738:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7bfa      	ldrb	r2, [r7, #15]
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000760:	3301      	adds	r3, #1
 8000762:	425a      	negs	r2, r3
 8000764:	f003 031f 	and.w	r3, r3, #31
 8000768:	f002 021f 	and.w	r2, r2, #31
 800076c:	bf58      	it	pl
 800076e:	4253      	negpl	r3, r2
 8000770:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800077e:	429a      	cmp	r2, r3
 8000780:	d101      	bne.n	8000786 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8000782:	2301      	movs	r3, #1
 8000784:	e00c      	b.n	80007a0 <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800078c:	461a      	mov	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	5c9a      	ldrb	r2, [r3, r2]
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7bfa      	ldrb	r2, [r7, #15]
 800079a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <Parser_TakeLine>:
uint8_t BlinkActive = 0xFF;



void Parser_TakeLine(RBuffer_t *RBuff, uint8_t *Destination)		//Returns command to variable taken from buffer
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
	uint8_t OneSign;
	do
	{
		RBuffer_Read(RBuff, &OneSign);
 80007ba:	f107 030e 	add.w	r3, r7, #14
 80007be:	4619      	mov	r1, r3
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ffc5 	bl	8000750 <RBuffer_Read>
		if(OneSign == ENDLINE)
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	2b0a      	cmp	r3, #10
 80007ca:	d105      	bne.n	80007d8 <Parser_TakeLine+0x2c>
		{
			Destination[i] = 0;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	4413      	add	r3, r2
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e004      	b.n	80007e2 <Parser_TakeLine+0x36>
		}
		else
		{
			Destination[i] = OneSign;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	7bba      	ldrb	r2, [r7, #14]
 80007e0:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	3301      	adds	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
	}while(ENDLINE != OneSign);
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	2b0a      	cmp	r3, #10
 80007ec:	d1e5      	bne.n	80007ba <Parser_TakeLine+0xe>
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <Parser_ParseLedToggle>:




void Parser_ParseLedToggle(uint8_t onoff)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	char* ParsePointer = strtok(NULL,",");		//look for "," token (place \0 instead, return pointer to separated parameter)
 8000802:	491b      	ldr	r1, [pc, #108]	; (8000870 <Parser_ParseLedToggle+0x78>)
 8000804:	2000      	movs	r0, #0
 8000806:	f004 fbeb 	bl	8004fe0 <strtok>
 800080a:	60f8      	str	r0, [r7, #12]

	if(NULL == ParsePointer)					//if returned pointer is NULL, return (end of string, no parameters)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d02a      	beq.n	8000868 <Parser_ParseLedToggle+0x70>
	{
		return;
	}

	if(strcmp("1", ParsePointer) == 0)
 8000812:	68f9      	ldr	r1, [r7, #12]
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <Parser_ParseLedToggle+0x7c>)
 8000816:	f7ff fceb 	bl	80001f0 <strcmp>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d105      	bne.n	800082c <Parser_ParseLedToggle+0x34>
	{
		Led_SetLightStatus(&Led1,onoff);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4619      	mov	r1, r3
 8000824:	4814      	ldr	r0, [pc, #80]	; (8000878 <Parser_ParseLedToggle+0x80>)
 8000826:	f7ff ff38 	bl	800069a <Led_SetLightStatus>
 800082a:	e018      	b.n	800085e <Parser_ParseLedToggle+0x66>
	}
	else if(strcmp("2", ParsePointer) == 0)
 800082c:	68f9      	ldr	r1, [r7, #12]
 800082e:	4813      	ldr	r0, [pc, #76]	; (800087c <Parser_ParseLedToggle+0x84>)
 8000830:	f7ff fcde 	bl	80001f0 <strcmp>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d105      	bne.n	8000846 <Parser_ParseLedToggle+0x4e>
	{
		Led_SetLightStatus(&Led2,onoff);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4619      	mov	r1, r3
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <Parser_ParseLedToggle+0x88>)
 8000840:	f7ff ff2b 	bl	800069a <Led_SetLightStatus>
 8000844:	e00b      	b.n	800085e <Parser_ParseLedToggle+0x66>
	}
	else if(strcmp("3", ParsePointer) == 0)
 8000846:	68f9      	ldr	r1, [r7, #12]
 8000848:	480e      	ldr	r0, [pc, #56]	; (8000884 <Parser_ParseLedToggle+0x8c>)
 800084a:	f7ff fcd1 	bl	80001f0 <strcmp>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d104      	bne.n	800085e <Parser_ParseLedToggle+0x66>
	{
		Led_SetLightStatus(&Led3,onoff);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4619      	mov	r1, r3
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <Parser_ParseLedToggle+0x90>)
 800085a:	f7ff ff1e 	bl	800069a <Led_SetLightStatus>
	}

	Parser_ParseLedToggle(onoff);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ffc9 	bl	80007f8 <Parser_ParseLedToggle>
 8000866:	e000      	b.n	800086a <Parser_ParseLedToggle+0x72>
		return;
 8000868:	bf00      	nop
}
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	080061bc 	.word	0x080061bc
 8000874:	080061c0 	.word	0x080061c0
 8000878:	200002bc 	.word	0x200002bc
 800087c:	080061c4 	.word	0x080061c4
 8000880:	200002d0 	.word	0x200002d0
 8000884:	080061c8 	.word	0x080061c8
 8000888:	200002e4 	.word	0x200002e4

0800088c <Parser_BlinkSpeed>:

void Parser_BlinkSpeed(uint8_t LedNumber)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	char* ParsePointer = strtok(NULL,",");
 8000896:	491b      	ldr	r1, [pc, #108]	; (8000904 <Parser_BlinkSpeed+0x78>)
 8000898:	2000      	movs	r0, #0
 800089a:	f004 fba1 	bl	8004fe0 <strtok>
 800089e:	60f8      	str	r0, [r7, #12]
	uint8_t Speed = atoi(ParsePointer);
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f004 fb59 	bl	8004f58 <atoi>
 80008a6:	4603      	mov	r3, r0
 80008a8:	72fb      	strb	r3, [r7, #11]

	switch(LedNumber)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d01a      	beq.n	80008e6 <Parser_BlinkSpeed+0x5a>
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	dc22      	bgt.n	80008fa <Parser_BlinkSpeed+0x6e>
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d002      	beq.n	80008be <Parser_BlinkSpeed+0x32>
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d00a      	beq.n	80008d2 <Parser_BlinkSpeed+0x46>
	case 3:
		Led_SetBlinkDelay(&Led3, Speed);
		Led_SetBlinkStatus(&Led3, DIODE_ON);
		break;
	default:
		break;
 80008bc:	e01d      	b.n	80008fa <Parser_BlinkSpeed+0x6e>
		Led_SetBlinkDelay(&Led1, Speed);
 80008be:	7afb      	ldrb	r3, [r7, #11]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <Parser_BlinkSpeed+0x7c>)
 80008c4:	f7ff ff0a 	bl	80006dc <Led_SetBlinkDelay>
		Led_SetBlinkStatus(&Led1, DIODE_ON);
 80008c8:	2101      	movs	r1, #1
 80008ca:	480f      	ldr	r0, [pc, #60]	; (8000908 <Parser_BlinkSpeed+0x7c>)
 80008cc:	f7ff fef7 	bl	80006be <Led_SetBlinkStatus>
		break;
 80008d0:	e014      	b.n	80008fc <Parser_BlinkSpeed+0x70>
		Led_SetBlinkDelay(&Led2, Speed);
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <Parser_BlinkSpeed+0x80>)
 80008d8:	f7ff ff00 	bl	80006dc <Led_SetBlinkDelay>
		Led_SetBlinkStatus(&Led2, DIODE_ON);
 80008dc:	2101      	movs	r1, #1
 80008de:	480b      	ldr	r0, [pc, #44]	; (800090c <Parser_BlinkSpeed+0x80>)
 80008e0:	f7ff feed 	bl	80006be <Led_SetBlinkStatus>
		break;
 80008e4:	e00a      	b.n	80008fc <Parser_BlinkSpeed+0x70>
		Led_SetBlinkDelay(&Led3, Speed);
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <Parser_BlinkSpeed+0x84>)
 80008ec:	f7ff fef6 	bl	80006dc <Led_SetBlinkDelay>
		Led_SetBlinkStatus(&Led3, DIODE_ON);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <Parser_BlinkSpeed+0x84>)
 80008f4:	f7ff fee3 	bl	80006be <Led_SetBlinkStatus>
		break;
 80008f8:	e000      	b.n	80008fc <Parser_BlinkSpeed+0x70>
		break;
 80008fa:	bf00      	nop
	}



}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	080061bc 	.word	0x080061bc
 8000908:	200002bc 	.word	0x200002bc
 800090c:	200002d0 	.word	0x200002d0
 8000910:	200002e4 	.word	0x200002e4

08000914 <Parser_ParseBlink>:

void Parser_ParseBlink()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	char* ParsePointer = strtok(NULL,",");
 800091a:	4914      	ldr	r1, [pc, #80]	; (800096c <Parser_ParseBlink+0x58>)
 800091c:	2000      	movs	r0, #0
 800091e:	f004 fb5f 	bl	8004fe0 <strtok>
 8000922:	6078      	str	r0, [r7, #4]
	if(strcmp("1", ParsePointer) == 0)
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	4812      	ldr	r0, [pc, #72]	; (8000970 <Parser_ParseBlink+0x5c>)
 8000928:	f7ff fc62 	bl	80001f0 <strcmp>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d103      	bne.n	800093a <Parser_ParseBlink+0x26>
	{
		Parser_BlinkSpeed(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff ffaa 	bl	800088c <Parser_BlinkSpeed>
	}
	else if(strcmp("3", ParsePointer) == 0)
	{
		Parser_BlinkSpeed(3);
	}
}
 8000938:	e014      	b.n	8000964 <Parser_ParseBlink+0x50>
	else if(strcmp("2", ParsePointer) == 0)
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <Parser_ParseBlink+0x60>)
 800093e:	f7ff fc57 	bl	80001f0 <strcmp>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d103      	bne.n	8000950 <Parser_ParseBlink+0x3c>
		Parser_BlinkSpeed(2);
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff ff9f 	bl	800088c <Parser_BlinkSpeed>
}
 800094e:	e009      	b.n	8000964 <Parser_ParseBlink+0x50>
	else if(strcmp("3", ParsePointer) == 0)
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <Parser_ParseBlink+0x64>)
 8000954:	f7ff fc4c 	bl	80001f0 <strcmp>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <Parser_ParseBlink+0x50>
		Parser_BlinkSpeed(3);
 800095e:	2003      	movs	r0, #3
 8000960:	f7ff ff94 	bl	800088c <Parser_BlinkSpeed>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	080061bc 	.word	0x080061bc
 8000970:	080061c0 	.word	0x080061c0
 8000974:	080061c4 	.word	0x080061c4
 8000978:	080061c8 	.word	0x080061c8

0800097c <Parser_Parse>:


void Parser_Parse(uint8_t* Command)					//look for commands, if proper command is found go to separate funcion to parse the paremeters
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	char* ParsePointer = strtok((char*)Command,"=");
 8000984:	4913      	ldr	r1, [pc, #76]	; (80009d4 <Parser_Parse+0x58>)
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f004 fb2a 	bl	8004fe0 <strtok>
 800098c:	60f8      	str	r0, [r7, #12]

	if(strcmp("LEDON", ParsePointer) == 0)
 800098e:	68f9      	ldr	r1, [r7, #12]
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <Parser_Parse+0x5c>)
 8000992:	f7ff fc2d 	bl	80001f0 <strcmp>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d103      	bne.n	80009a4 <Parser_Parse+0x28>
	{
		Parser_ParseLedToggle(1);
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff ff2b 	bl	80007f8 <Parser_ParseLedToggle>
	{
		Parser_ParseBlink();
	}


}
 80009a2:	e013      	b.n	80009cc <Parser_Parse+0x50>
	else if(strcmp("LEDOFF", ParsePointer) == 0)
 80009a4:	68f9      	ldr	r1, [r7, #12]
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <Parser_Parse+0x60>)
 80009a8:	f7ff fc22 	bl	80001f0 <strcmp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d103      	bne.n	80009ba <Parser_Parse+0x3e>
		Parser_ParseLedToggle(0);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff20 	bl	80007f8 <Parser_ParseLedToggle>
}
 80009b8:	e008      	b.n	80009cc <Parser_Parse+0x50>
	else if(strcmp("LEDBLINK", ParsePointer) == 0)
 80009ba:	68f9      	ldr	r1, [r7, #12]
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <Parser_Parse+0x64>)
 80009be:	f7ff fc17 	bl	80001f0 <strcmp>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <Parser_Parse+0x50>
		Parser_ParseBlink();
 80009c8:	f7ff ffa4 	bl	8000914 <Parser_ParseBlink>
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	080061cc 	.word	0x080061cc
 80009d8:	080061d0 	.word	0x080061d0
 80009dc:	080061d8 	.word	0x080061d8
 80009e0:	080061e0 	.word	0x080061e0

080009e4 <Debounce_ButtonInit>:
//
//INIT FUNCTION
//

void Debounce_ButtonInit(Button_t* Key, GPIO_TypeDef* GPIOx, uint16_t ButtonPin, uint16_t Pull, uint32_t DebounceTime, uint32_t HoldTime, uint32_t RepeatTime)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	4611      	mov	r1, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	460b      	mov	r3, r1
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	4613      	mov	r3, r2
 80009f8:	80bb      	strh	r3, [r7, #4]
	Key->State = IDLE;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
	Key->ButtonGPIOx = GPIOx;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	605a      	str	r2, [r3, #4]
	Key->ButtonPin = ButtonPin;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	88fa      	ldrh	r2, [r7, #6]
 8000a0a:	815a      	strh	r2, [r3, #10]
	Key->PressedValue = Pull;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	88ba      	ldrh	r2, [r7, #4]
 8000a10:	811a      	strh	r2, [r3, #8]
	Key->DebounceTime = DebounceTime;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	60da      	str	r2, [r3, #12]
	Key->HoldTime = HoldTime;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	69fa      	ldr	r2, [r7, #28]
 8000a1c:	611a      	str	r2, [r3, #16]
	Key->RepeatTime = RepeatTime;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	6a3a      	ldr	r2, [r7, #32]
 8000a22:	615a      	str	r2, [r3, #20]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <Debounce_RegisterCallbackPress>:
//
//CALLBACKS REGISTER FUNCTIONS
//

void Debounce_RegisterCallbackPress(Button_t* Key ,void (*Fun)(void))		//Register callback funciotn for pressed button
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	Key->ButtonPressedFun = Fun;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	61da      	str	r2, [r3, #28]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_DMA_Init+0x3c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <MX_DMA_Init+0x3c>)
 8000a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_DMA_Init+0x3c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	200c      	movs	r0, #12
 8000a74:	f000 ff45 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a78:	200c      	movs	r0, #12
 8000a7a:	f000 ff5e 	bl	800193a <HAL_NVIC_EnableIRQ>

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_ETH_Init+0x84>)
 8000a92:	4a20      	ldr	r2, [pc, #128]	; (8000b14 <MX_ETH_Init+0x88>)
 8000a94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <MX_ETH_Init+0x8c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_ETH_Init+0x8c>)
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_ETH_Init+0x8c>)
 8000aa4:	22e1      	movs	r2, #225	; 0xe1
 8000aa6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_ETH_Init+0x8c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_ETH_Init+0x8c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_ETH_Init+0x8c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_ETH_Init+0x84>)
 8000abc:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <MX_ETH_Init+0x8c>)
 8000abe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_ETH_Init+0x84>)
 8000ac2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ac6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_ETH_Init+0x84>)
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <MX_ETH_Init+0x90>)
 8000acc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_ETH_Init+0x84>)
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MX_ETH_Init+0x94>)
 8000ad2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_ETH_Init+0x84>)
 8000ad6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ada:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_ETH_Init+0x84>)
 8000ade:	f001 fb49 	bl	8002174 <HAL_ETH_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000ae8:	f000 fac3 	bl	8001072 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aec:	2238      	movs	r2, #56	; 0x38
 8000aee:	2100      	movs	r1, #0
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_ETH_Init+0x98>)
 8000af2:	f004 fa5f 	bl	8004fb4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_ETH_Init+0x98>)
 8000af8:	2221      	movs	r2, #33	; 0x21
 8000afa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_ETH_Init+0x98>)
 8000afe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b02:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_ETH_Init+0x98>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000204 	.word	0x20000204
 8000b14:	40028000 	.word	0x40028000
 8000b18:	200002b4 	.word	0x200002b4
 8000b1c:	2000012c 	.word	0x2000012c
 8000b20:	2000008c 	.word	0x2000008c
 8000b24:	200001cc 	.word	0x200001cc

08000b28 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a55      	ldr	r2, [pc, #340]	; (8000c9c <HAL_ETH_MspInit+0x174>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	f040 80a4 	bne.w	8000c94 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
 8000b50:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a52      	ldr	r2, [pc, #328]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b50      	ldr	r3, [pc, #320]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b64:	623b      	str	r3, [r7, #32]
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a4b      	ldr	r2, [pc, #300]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	4b45      	ldr	r3, [pc, #276]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a44      	ldr	r2, [pc, #272]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b42      	ldr	r3, [pc, #264]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a3d      	ldr	r2, [pc, #244]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a2f      	ldr	r2, [pc, #188]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c10:	2332      	movs	r3, #50	; 0x32
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <HAL_ETH_MspInit+0x17c>)
 8000c2c:	f001 fdca 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c30:	2386      	movs	r3, #134	; 0x86
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <HAL_ETH_MspInit+0x180>)
 8000c4c:	f001 fdba 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c62:	230b      	movs	r3, #11
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <HAL_ETH_MspInit+0x184>)
 8000c6e:	f001 fda9 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c84:	230b      	movs	r3, #11
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <HAL_ETH_MspInit+0x188>)
 8000c90:	f001 fd98 	bl	80027c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c94:	bf00      	nop
 8000c96:	3738      	adds	r7, #56	; 0x38
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40028000 	.word	0x40028000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	40021800 	.word	0x40021800

08000cb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	; 0x30
 8000cb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	4b4c      	ldr	r3, [pc, #304]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b49      	ldr	r3, [pc, #292]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	4b45      	ldr	r3, [pc, #276]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a44      	ldr	r2, [pc, #272]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b42      	ldr	r3, [pc, #264]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b3e      	ldr	r3, [pc, #248]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a3d      	ldr	r2, [pc, #244]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a36      	ldr	r2, [pc, #216]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a28      	ldr	r2, [pc, #160]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <MX_GPIO_Init+0x14c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d78:	4822      	ldr	r0, [pc, #136]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000d7a:	f001 fecf 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2140      	movs	r1, #64	; 0x40
 8000d82:	4821      	ldr	r0, [pc, #132]	; (8000e08 <MX_GPIO_Init+0x154>)
 8000d84:	f001 feca 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT1_Pin;
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481b      	ldr	r0, [pc, #108]	; (8000e0c <MX_GPIO_Init+0x158>)
 8000da0:	f001 fd10 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000da4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000dbe:	f001 fd01 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <MX_GPIO_Init+0x154>)
 8000dda:	f001 fcf3 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_GPIO_Init+0x154>)
 8000df2:	f001 fce7 	bl	80027c4 <HAL_GPIO_Init>

}
 8000df6:	bf00      	nop
 8000df8:	3730      	adds	r7, #48	; 0x30
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40021800 	.word	0x40021800
 8000e0c:	40020800 	.word	0x40020800

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f000 fc03 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1a:	f000 f867 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1e:	f7ff ff49 	bl	8000cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e22:	f7ff fe13 	bl	8000a4c <MX_DMA_Init>
  MX_ETH_Init();
 8000e26:	f7ff fe31 	bl	8000a8c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e2a:	f000 fa6f 	bl	800130c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e2e:	f000 fb45 	bl	80014bc <MX_USB_OTG_FS_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e32:	f000 f8c5 	bl	8000fc0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceivedMessage , 32);		//Listen to UART, execute receive cplt callback after 32 bytes or uart idle state, allows to receive flexible data lengths (DMA is collecting data, and executing Interrupt)
 8000e36:	2220      	movs	r2, #32
 8000e38:	4920      	ldr	r1, [pc, #128]	; (8000ebc <main+0xac>)
 8000e3a:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <main+0xb0>)
 8000e3c:	f002 fca3 	bl	8003786 <HAL_UARTEx_ReceiveToIdle_DMA>
  Debounce_ButtonInit(&BlueButton, BT1_GPIO_Port, BT1_Pin, PULL_DOWN, 30, 1000, 1000);
 8000e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	231e      	movs	r3, #30
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e56:	491b      	ldr	r1, [pc, #108]	; (8000ec4 <main+0xb4>)
 8000e58:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <main+0xb8>)
 8000e5a:	f7ff fdc3 	bl	80009e4 <Debounce_ButtonInit>
  Debounce_RegisterCallbackPress(&BlueButton, ButtonPress);
 8000e5e:	491b      	ldr	r1, [pc, #108]	; (8000ecc <main+0xbc>)
 8000e60:	4819      	ldr	r0, [pc, #100]	; (8000ec8 <main+0xb8>)
 8000e62:	f7ff fde5 	bl	8000a30 <Debounce_RegisterCallbackPress>

  Led_Init(&Led1, LD1_GPIO_Port, LD1_Pin);
 8000e66:	2201      	movs	r2, #1
 8000e68:	4919      	ldr	r1, [pc, #100]	; (8000ed0 <main+0xc0>)
 8000e6a:	481a      	ldr	r0, [pc, #104]	; (8000ed4 <main+0xc4>)
 8000e6c:	f7ff fbd1 	bl	8000612 <Led_Init>
  Led_Init(&Led2, LD2_GPIO_Port, LD2_Pin);
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	4917      	ldr	r1, [pc, #92]	; (8000ed0 <main+0xc0>)
 8000e74:	4818      	ldr	r0, [pc, #96]	; (8000ed8 <main+0xc8>)
 8000e76:	f7ff fbcc 	bl	8000612 <Led_Init>
  Led_Init(&Led3, LD3_GPIO_Port, LD3_Pin);
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	4914      	ldr	r1, [pc, #80]	; (8000ed0 <main+0xc0>)
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <main+0xcc>)
 8000e82:	f7ff fbc6 	bl	8000612 <Led_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Led_Routine(&Led1);
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <main+0xc4>)
 8000e88:	f7ff fbe6 	bl	8000658 <Led_Routine>
	  Led_Routine(&Led2);
 8000e8c:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <main+0xc8>)
 8000e8e:	f7ff fbe3 	bl	8000658 <Led_Routine>
	  Led_Routine(&Led3);
 8000e92:	4812      	ldr	r0, [pc, #72]	; (8000edc <main+0xcc>)
 8000e94:	f7ff fbe0 	bl	8000658 <Led_Routine>

	  if(CommandsCounter > 0)
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <main+0xd0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f2      	beq.n	8000e86 <main+0x76>
	  {
		  Parser_TakeLine(&ReceivedDataRBuffer,ExtractedCommand);
 8000ea0:	4910      	ldr	r1, [pc, #64]	; (8000ee4 <main+0xd4>)
 8000ea2:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <main+0xd8>)
 8000ea4:	f7ff fc82 	bl	80007ac <Parser_TakeLine>
		  Parser_Parse(ExtractedCommand);
 8000ea8:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <main+0xd4>)
 8000eaa:	f7ff fd67 	bl	800097c <Parser_Parse>
		  CommandsCounter--;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <main+0xd0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <main+0xd0>)
 8000eb8:	701a      	strb	r2, [r3, #0]
	  Led_Routine(&Led1);
 8000eba:	e7e4      	b.n	8000e86 <main+0x76>
 8000ebc:	20000348 	.word	0x20000348
 8000ec0:	20000390 	.word	0x20000390
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	200002f8 	.word	0x200002f8
 8000ecc:	08001065 	.word	0x08001065
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	200002bc 	.word	0x200002bc
 8000ed8:	200002d0 	.word	0x200002d0
 8000edc:	200002e4 	.word	0x200002e4
 8000ee0:	20000368 	.word	0x20000368
 8000ee4:	2000036c 	.word	0x2000036c
 8000ee8:	20000324 	.word	0x20000324

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 f85a 	bl	8004fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f60:	23a8      	movs	r3, #168	; 0xa8
 8000f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 ff23 	bl	8002dbc <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f7c:	f000 f879 	bl	8001072 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 f984 	bl	80032ac <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000faa:	f000 f862 	bl	8001072 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	; 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	200e      	movs	r0, #14
 8000fca:	f000 fc9a 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fce:	200e      	movs	r0, #14
 8000fd0:	f000 fcb3 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2027      	movs	r0, #39	; 0x27
 8000fda:	f000 fc92 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fde:	2027      	movs	r0, #39	; 0x27
 8000fe0:	f000 fcab 	bl	800193a <HAL_NVIC_EnableIRQ>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) //Callback executed after Uart Rx complete (32 bytes or uart idle state)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	if(huart -> Instance == USART3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <HAL_UARTEx_RxEventCallback+0x68>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d123      	bne.n	8001046 <HAL_UARTEx_RxEventCallback+0x5e>
	{

		if(NULL != strpbrk((char*)ReceivedMessage,"\n"))	//look for linefeed to count full received commands
 8000ffe:	210a      	movs	r1, #10
 8001000:	4814      	ldr	r0, [pc, #80]	; (8001054 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001002:	f003 ffdf 	bl	8004fc4 <strchr>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_UARTEx_RxEventCallback+0x30>
		{
			CommandsCounter++;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_UARTEx_RxEventCallback+0x70>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_UARTEx_RxEventCallback+0x70>)
 8001016:	701a      	strb	r2, [r3, #0]
		}

		for(i = 0; i < Size; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e009      	b.n	8001032 <HAL_UARTEx_RxEventCallback+0x4a>
		{
			RBuffer_Write(&ReceivedDataRBuffer, ReceivedMessage[i]);	//Write received message to circular buffer
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001022:	5cd3      	ldrb	r3, [r2, r3]
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <HAL_UARTEx_RxEventCallback+0x74>)
 8001028:	f7ff fb66 	bl	80006f8 <RBuffer_Write>
		for(i = 0; i < Size; i++)
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	3301      	adds	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	b29b      	uxth	r3, r3
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f0      	bhi.n	800101e <HAL_UARTEx_RxEventCallback+0x36>
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceivedMessage , 32); //set listen again
 800103c:	2220      	movs	r2, #32
 800103e:	4905      	ldr	r1, [pc, #20]	; (8001054 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <HAL_UARTEx_RxEventCallback+0x78>)
 8001042:	f002 fba0 	bl	8003786 <HAL_UARTEx_ReceiveToIdle_DMA>

	}
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004800 	.word	0x40004800
 8001054:	20000348 	.word	0x20000348
 8001058:	20000368 	.word	0x20000368
 800105c:	20000324 	.word	0x20000324
 8001060:	20000390 	.word	0x20000390

08001064 <ButtonPress>:


void ButtonPress (void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001076:	b672      	cpsid	i
}
 8001078:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107a:	e7fe      	b.n	800107a <Error_Handler+0x8>

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_MspInit+0x4c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 fad4 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <DMA1_Stream1_IRQHandler+0x10>)
 8001126:	f000 fdbb 	bl	8001ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000434 	.word	0x20000434

08001134 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <DMA1_Stream3_IRQHandler+0x10>)
 800113a:	f000 fdb1 	bl	8001ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200003d4 	.word	0x200003d4

08001148 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USART3_IRQHandler+0x10>)
 800114e:	f002 fb7f 	bl	8003850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000390 	.word	0x20000390

0800115c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_kill>:

int _kill(int pid, int sig)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001176:	f003 fef3 	bl	8004f60 <__errno>
 800117a:	4603      	mov	r3, r0
 800117c:	2216      	movs	r2, #22
 800117e:	601a      	str	r2, [r3, #0]
  return -1;
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_exit>:

void _exit (int status)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffe7 	bl	800116c <_kill>
  while (1) {}    /* Make sure we hang here */
 800119e:	e7fe      	b.n	800119e <_exit+0x12>

080011a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e00a      	b.n	80011c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b2:	f3af 8000 	nop.w
 80011b6:	4601      	mov	r1, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	b2ca      	uxtb	r2, r1
 80011c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbf0      	blt.n	80011b2 <_read+0x12>
  }

  return len;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	e009      	b.n	8001200 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	60ba      	str	r2, [r7, #8]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	dbf1      	blt.n	80011ec <_write+0x12>
  }
  return len;
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_close>:

int _close(int file)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123a:	605a      	str	r2, [r3, #4]
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_isatty>:

int _isatty(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f003 fe58 	bl	8004f60 <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20030000 	.word	0x20030000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	2000038c 	.word	0x2000038c
 80012e4:	200009b8 	.word	0x200009b8

080012e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART3_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001344:	f002 f9d2 	bl	80036ec <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f7ff fe90 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000390 	.word	0x20000390
 800135c:	40004800 	.word	0x40004800

08001360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_UART_MspInit+0x140>)
 800137e:	4293      	cmp	r3, r2
 8001380:	f040 8089 	bne.w	8001496 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a45      	ldr	r2, [pc, #276]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800138e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <HAL_UART_MspInit+0x144>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_UART_MspInit+0x144>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <HAL_UART_MspInit+0x144>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_UART_MspInit+0x144>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ce:	2307      	movs	r3, #7
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4833      	ldr	r0, [pc, #204]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013da:	f001 f9f3 	bl	80027c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013e0:	4a33      	ldr	r2, [pc, #204]	; (80014b0 <HAL_UART_MspInit+0x150>)
 80013e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80013e4:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_UART_MspInit+0x14c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_UART_MspInit+0x14c>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800141e:	4823      	ldr	r0, [pc, #140]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001420:	f000 faa6 	bl	8001970 <HAL_DMA_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800142a:	f7ff fe22 	bl	8001072 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_UART_MspInit+0x154>)
 800143c:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_UART_MspInit+0x158>)
 800143e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_UART_MspInit+0x154>)
 8001442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001446:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_UART_MspInit+0x154>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_UART_MspInit+0x154>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_UART_MspInit+0x154>)
 8001456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_UART_MspInit+0x154>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_UART_MspInit+0x154>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_UART_MspInit+0x154>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_UART_MspInit+0x154>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_UART_MspInit+0x154>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <HAL_UART_MspInit+0x154>)
 800147c:	f000 fa78 	bl	8001970 <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001486:	f7ff fdf4 	bl	8001072 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_UART_MspInit+0x154>)
 800148e:	639a      	str	r2, [r3, #56]	; 0x38
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_UART_MspInit+0x154>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40004800 	.word	0x40004800
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	200003d4 	.word	0x200003d4
 80014b0:	40026058 	.word	0x40026058
 80014b4:	20000434 	.word	0x20000434
 80014b8:	40026028 	.word	0x40026028

080014bc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014dc:	2202      	movs	r2, #2
 80014de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001500:	f001 fb3f 	bl	8002b82 <HAL_PCD_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800150a:	f7ff fdb2 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000494 	.word	0x20000494

08001518 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001538:	d13f      	bne.n	80015ba <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_PCD_MspInit+0xac>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <HAL_PCD_MspInit+0xac>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_PCD_MspInit+0xac>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001556:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001568:	230a      	movs	r3, #10
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4815      	ldr	r0, [pc, #84]	; (80015c8 <HAL_PCD_MspInit+0xb0>)
 8001574:	f001 f926 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <HAL_PCD_MspInit+0xb0>)
 800158e:	f001 f919 	bl	80027c4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_PCD_MspInit+0xac>)
 8001594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_PCD_MspInit+0xac>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159c:	6353      	str	r3, [r2, #52]	; 0x34
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_PCD_MspInit+0xac>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_PCD_MspInit+0xac>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_PCD_MspInit+0xac>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e8:	4c0b      	ldr	r4, [pc, #44]	; (8001618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f6:	f7ff fe77 	bl	80012e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f003 fcb7 	bl	8004f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff fc07 	bl	8000e10 <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001604:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001610:	08006464 	.word	0x08006464
  ldr r2, =_sbss
 8001614:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001618:	200009b4 	.word	0x200009b4

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f94f 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fd12 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f967 	bl	8001956 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f92f 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	200009a0 	.word	0x200009a0

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200009a0 	.word	0x200009a0

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff29 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff3e 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff31 	bl	80017b0 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff feb6 	bl	80016ec <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e099      	b.n	8001ac0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ac:	e00f      	b.n	80019ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ae:	f7ff fe9d 	bl	80016ec <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d908      	bls.n	80019ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2220      	movs	r2, #32
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2203      	movs	r2, #3
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e078      	b.n	8001ac0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1e8      	bne.n	80019ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_DMA_Init+0x158>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d107      	bne.n	8001a38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4313      	orrs	r3, r2
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f023 0307 	bic.w	r3, r3, #7
 8001a4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d117      	bne.n	8001a92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00e      	beq.n	8001a92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fb01 	bl	800207c <DMA_CheckFifoParam>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e016      	b.n	8001ac0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fab8 	bl	8002010 <DMA_CalcBaseAndBitshift>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa8:	223f      	movs	r2, #63	; 0x3f
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	f010803f 	.word	0xf010803f

08001acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_DMA_Start_IT+0x26>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e040      	b.n	8001b74 <HAL_DMA_Start_IT+0xa8>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d12f      	bne.n	8001b66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fa4a 	bl	8001fb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	223f      	movs	r2, #63	; 0x3f
 8001b26:	409a      	lsls	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0216 	orr.w	r2, r2, #22
 8001b3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0208 	orr.w	r2, r2, #8
 8001b52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e005      	b.n	8001b72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b8a:	f7ff fdaf 	bl	80016ec <HAL_GetTick>
 8001b8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e052      	b.n	8001c54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0216 	bic.w	r2, r2, #22
 8001bbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <HAL_DMA_Abort+0x62>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0208 	bic.w	r2, r2, #8
 8001bec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfe:	e013      	b.n	8001c28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c00:	f7ff fd74 	bl	80016ec <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d90c      	bls.n	8001c28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2220      	movs	r2, #32
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e015      	b.n	8001c54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e4      	bne.n	8001c00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	223f      	movs	r2, #63	; 0x3f
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d004      	beq.n	8001c7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00c      	b.n	8001c94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cac:	4b8e      	ldr	r3, [pc, #568]	; (8001ee8 <HAL_DMA_IRQHandler+0x248>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a8e      	ldr	r2, [pc, #568]	; (8001eec <HAL_DMA_IRQHandler+0x24c>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0a9b      	lsrs	r3, r3, #10
 8001cb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	2208      	movs	r2, #8
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01a      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0204 	bic.w	r2, r2, #4
 8001cf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2201      	movs	r2, #1
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d012      	beq.n	8001d42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	2201      	movs	r2, #1
 8001d30:	409a      	lsls	r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f043 0202 	orr.w	r2, r3, #2
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2204      	movs	r2, #4
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d012      	beq.n	8001d78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2204      	movs	r2, #4
 8001d66:	409a      	lsls	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f043 0204 	orr.w	r2, r3, #4
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d043      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d03c      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	2210      	movs	r2, #16
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d018      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d108      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d024      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
 8001dce:	e01f      	b.n	8001e10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01b      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
 8001de0:	e016      	b.n	8001e10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0208 	bic.w	r2, r2, #8
 8001dfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2220      	movs	r2, #32
 8001e16:	409a      	lsls	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 808f 	beq.w	8001f40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8087 	beq.w	8001f40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2220      	movs	r2, #32
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d136      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0216 	bic.w	r2, r2, #22
 8001e58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <HAL_DMA_IRQHandler+0x1da>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0208 	bic.w	r2, r2, #8
 8001e88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	223f      	movs	r2, #63	; 0x3f
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d07e      	beq.n	8001fac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
        }
        return;
 8001eb6:	e079      	b.n	8001fac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01d      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d031      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
 8001ee4:	e02c      	b.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d023      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
 8001f00:	e01e      	b.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10f      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0210 	bic.w	r2, r2, #16
 8001f1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d032      	beq.n	8001fae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d022      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2205      	movs	r2, #5
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d307      	bcc.n	8001f88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f2      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x2cc>
 8001f86:	e000      	b.n	8001f8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
 8001faa:	e000      	b.n	8001fae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fac:	bf00      	nop
    }
  }
}
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	d108      	bne.n	8001ff4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ff2:	e007      	b.n	8002004 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3b10      	subs	r3, #16
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <DMA_CalcBaseAndBitshift+0x64>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <DMA_CalcBaseAndBitshift+0x68>)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d909      	bls.n	8002052 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	1d1a      	adds	r2, r3, #4
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	659a      	str	r2, [r3, #88]	; 0x58
 8002050:	e007      	b.n	8002062 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	aaaaaaab 	.word	0xaaaaaaab
 8002078:	08006204 	.word	0x08006204

0800207c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11f      	bne.n	80020d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d856      	bhi.n	800214a <DMA_CheckFifoParam+0xce>
 800209c:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <DMA_CheckFifoParam+0x28>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020c7 	.word	0x080020c7
 80020ac:	080020b5 	.word	0x080020b5
 80020b0:	0800214b 	.word	0x0800214b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d046      	beq.n	800214e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c4:	e043      	b.n	800214e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ce:	d140      	bne.n	8002152 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d4:	e03d      	b.n	8002152 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020de:	d121      	bne.n	8002124 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d837      	bhi.n	8002156 <DMA_CheckFifoParam+0xda>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <DMA_CheckFifoParam+0x70>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	08002103 	.word	0x08002103
 80020f4:	080020fd 	.word	0x080020fd
 80020f8:	08002115 	.word	0x08002115
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002100:	e030      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d025      	beq.n	800215a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002112:	e022      	b.n	800215a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211c:	d11f      	bne.n	800215e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002122:	e01c      	b.n	800215e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d903      	bls.n	8002132 <DMA_CheckFifoParam+0xb6>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d003      	beq.n	8002138 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002130:	e018      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      break;
 8002136:	e015      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00e      	beq.n	8002162 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	e00b      	b.n	8002162 <DMA_CheckFifoParam+0xe6>
      break;
 800214a:	bf00      	nop
 800214c:	e00a      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
 8002150:	e008      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e006      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002156:	bf00      	nop
 8002158:	e004      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
 800215c:	e002      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;   
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002162:	bf00      	nop
    }
  } 
  
  return status; 
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06c      	b.n	8002260 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218c:	2b00      	cmp	r3, #0
 800218e:	d106      	bne.n	800219e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2223      	movs	r2, #35	; 0x23
 8002194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe fcc5 	bl	8000b28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_ETH_Init+0xf4>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a30      	ldr	r2, [pc, #192]	; (8002268 <HAL_ETH_Init+0xf4>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <HAL_ETH_Init+0xf4>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_ETH_Init+0xf8>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a2b      	ldr	r2, [pc, #172]	; (800226c <HAL_ETH_Init+0xf8>)
 80021c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_ETH_Init+0xf8>)
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4927      	ldr	r1, [pc, #156]	; (800226c <HAL_ETH_Init+0xf8>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_ETH_Init+0xf8>)
 80021d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f0:	f7ff fa7c 	bl	80016ec <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021f6:	e011      	b.n	800221c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021f8:	f7ff fa78 	bl	80016ec <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002206:	d909      	bls.n	800221c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2204      	movs	r2, #4
 800220c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	22e0      	movs	r2, #224	; 0xe0
 8002214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e021      	b.n	8002260 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e4      	bne.n	80021f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f958 	bl	80024e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f9ff 	bl	8002638 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa55 	bl	80026ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	461a      	mov	r2, r3
 8002246:	2100      	movs	r1, #0
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f9bd 	bl	80025c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2210      	movs	r2, #16
 800225a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	40013800 	.word	0x40013800

08002270 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4b51      	ldr	r3, [pc, #324]	; (80023cc <ETH_SetMACConfig+0x15c>)
 8002286:	4013      	ands	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	7c1b      	ldrb	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <ETH_SetMACConfig+0x28>
 8002292:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002296:	e000      	b.n	800229a <ETH_SetMACConfig+0x2a>
 8002298:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	7c5b      	ldrb	r3, [r3, #17]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <ETH_SetMACConfig+0x38>
 80022a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022a6:	e000      	b.n	80022aa <ETH_SetMACConfig+0x3a>
 80022a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	7fdb      	ldrb	r3, [r3, #31]
 80022b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	7f92      	ldrb	r2, [r2, #30]
 80022c4:	2a00      	cmp	r2, #0
 80022c6:	d102      	bne.n	80022ce <ETH_SetMACConfig+0x5e>
 80022c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022cc:	e000      	b.n	80022d0 <ETH_SetMACConfig+0x60>
 80022ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80022d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	7f1b      	ldrb	r3, [r3, #28]
 80022d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	791b      	ldrb	r3, [r3, #4]
 80022e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022ee:	2a00      	cmp	r2, #0
 80022f0:	d102      	bne.n	80022f8 <ETH_SetMACConfig+0x88>
 80022f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f6:	e000      	b.n	80022fa <ETH_SetMACConfig+0x8a>
 80022f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	7bdb      	ldrb	r3, [r3, #15]
 8002300:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002302:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002308:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002310:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002312:	4313      	orrs	r3, r2
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800232a:	2001      	movs	r0, #1
 800232c:	f7ff f9ea 	bl	8001704 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002346:	4013      	ands	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002356:	2a00      	cmp	r2, #0
 8002358:	d101      	bne.n	800235e <ETH_SetMACConfig+0xee>
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	e000      	b.n	8002360 <ETH_SetMACConfig+0xf0>
 800235e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002360:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002366:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800236e:	2a01      	cmp	r2, #1
 8002370:	d101      	bne.n	8002376 <ETH_SetMACConfig+0x106>
 8002372:	2208      	movs	r2, #8
 8002374:	e000      	b.n	8002378 <ETH_SetMACConfig+0x108>
 8002376:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002378:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002380:	2a01      	cmp	r2, #1
 8002382:	d101      	bne.n	8002388 <ETH_SetMACConfig+0x118>
 8002384:	2204      	movs	r2, #4
 8002386:	e000      	b.n	800238a <ETH_SetMACConfig+0x11a>
 8002388:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800238a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002392:	2a01      	cmp	r2, #1
 8002394:	d101      	bne.n	800239a <ETH_SetMACConfig+0x12a>
 8002396:	2202      	movs	r2, #2
 8002398:	e000      	b.n	800239c <ETH_SetMACConfig+0x12c>
 800239a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800239c:	4313      	orrs	r3, r2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7ff f9a5 	bl	8001704 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	ff20810f 	.word	0xff20810f

080023d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <ETH_SetDMAConfig+0x110>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7b1b      	ldrb	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <ETH_SetDMAConfig+0x2c>
 80023f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023fa:	e000      	b.n	80023fe <ETH_SetDMAConfig+0x2e>
 80023fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	7b5b      	ldrb	r3, [r3, #13]
 8002402:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002404:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	7f52      	ldrb	r2, [r2, #29]
 800240a:	2a00      	cmp	r2, #0
 800240c:	d102      	bne.n	8002414 <ETH_SetDMAConfig+0x44>
 800240e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002412:	e000      	b.n	8002416 <ETH_SetDMAConfig+0x46>
 8002414:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002416:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	7b9b      	ldrb	r3, [r3, #14]
 800241c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800241e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002424:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	7f1b      	ldrb	r3, [r3, #28]
 800242a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800242c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7f9b      	ldrb	r3, [r3, #30]
 8002432:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002434:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800243a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002442:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002444:	4313      	orrs	r3, r2
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002454:	461a      	mov	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff f94c 	bl	8001704 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	791b      	ldrb	r3, [r3, #4]
 800247e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002484:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800248a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002490:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002498:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800249a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7ff f91d 	bl	8001704 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	f8de3f23 	.word	0xf8de3f23

080024e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0a6      	sub	sp, #152	; 0x98
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002520:	2300      	movs	r3, #0
 8002522:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800252a:	2300      	movs	r3, #0
 800252c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800254c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002550:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fe86 	bl	8002270 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002564:	2301      	movs	r3, #1
 8002566:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002572:	2301      	movs	r3, #1
 8002574:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002590:	2301      	movs	r3, #1
 8002592:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002598:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800259a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800259e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff08 	bl	80023d0 <ETH_SetDMAConfig>
}
 80025c0:	bf00      	nop
 80025c2:	3798      	adds	r7, #152	; 0x98
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3305      	adds	r3, #5
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	3204      	adds	r2, #4
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <ETH_MACAddressConfig+0x68>)
 80025ea:	4413      	add	r3, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3303      	adds	r3, #3
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	061a      	lsls	r2, r3, #24
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3302      	adds	r3, #2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3301      	adds	r3, #1
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	4313      	orrs	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <ETH_MACAddressConfig+0x6c>)
 800261a:	4413      	add	r3, r2
 800261c:	461a      	mov	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	6013      	str	r3, [r2, #0]
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40028040 	.word	0x40028040
 8002634:	40028044 	.word	0x40028044

08002638 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e03e      	b.n	80026c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	3206      	adds	r2, #6
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d80c      	bhi.n	80026a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68d9      	ldr	r1, [r3, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	e004      	b.n	80026b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d9bd      	bls.n	8002646 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026dc:	611a      	str	r2, [r3, #16]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e046      	b.n	8002786 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6919      	ldr	r1, [r3, #16]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002734:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800273c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	3212      	adds	r2, #18
 8002752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d80c      	bhi.n	8002776 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6919      	ldr	r1, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	e004      	b.n	8002780 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d9b5      	bls.n	80026f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b6:	60da      	str	r2, [r3, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e177      	b.n	8002ad0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f040 8166 	bne.w	8002aca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d005      	beq.n	8002816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002812:	2b02      	cmp	r3, #2
 8002814:	d130      	bne.n	8002878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 0201 	and.w	r2, r3, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b03      	cmp	r3, #3
 8002882:	d017      	beq.n	80028b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d123      	bne.n	8002908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	08da      	lsrs	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3208      	adds	r2, #8
 80028c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	08da      	lsrs	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3208      	adds	r2, #8
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80c0 	beq.w	8002aca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 8002954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002958:	6453      	str	r3, [r2, #68]	; 0x44
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002966:	4a61      	ldr	r2, [pc, #388]	; (8002aec <HAL_GPIO_Init+0x328>)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_GPIO_Init+0x32c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d037      	beq.n	8002a02 <HAL_GPIO_Init+0x23e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <HAL_GPIO_Init+0x330>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_GPIO_Init+0x23a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_GPIO_Init+0x334>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02b      	beq.n	80029fa <HAL_GPIO_Init+0x236>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a55      	ldr	r2, [pc, #340]	; (8002afc <HAL_GPIO_Init+0x338>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d025      	beq.n	80029f6 <HAL_GPIO_Init+0x232>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_GPIO_Init+0x33c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <HAL_GPIO_Init+0x22e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a53      	ldr	r2, [pc, #332]	; (8002b04 <HAL_GPIO_Init+0x340>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x22a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x344>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x226>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_GPIO_Init+0x348>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x222>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a50      	ldr	r2, [pc, #320]	; (8002b10 <HAL_GPIO_Init+0x34c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x21e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <HAL_GPIO_Init+0x350>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x21a>
 80029da:	2309      	movs	r3, #9
 80029dc:	e012      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029de:	230a      	movs	r3, #10
 80029e0:	e010      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029e2:	2308      	movs	r3, #8
 80029e4:	e00e      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e00c      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029ea:	2306      	movs	r3, #6
 80029ec:	e00a      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e008      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e004      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 8002a02:	2300      	movs	r3, #0
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f002 0203 	and.w	r2, r2, #3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a14:	4935      	ldr	r1, [pc, #212]	; (8002aec <HAL_GPIO_Init+0x328>)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a46:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3301      	adds	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b0f      	cmp	r3, #15
 8002ad4:	f67f ae84 	bls.w	80027e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40021400 	.word	0x40021400
 8002b08:	40021800 	.word	0x40021800
 8002b0c:	40021c00 	.word	0x40021c00
 8002b10:	40022000 	.word	0x40022000
 8002b14:	40022400 	.word	0x40022400
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b60:	887a      	ldrh	r2, [r7, #2]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	041a      	lsls	r2, r3, #16
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	400b      	ands	r3, r1
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b84:	b08f      	sub	sp, #60	; 0x3c
 8002b86:	af0a      	add	r7, sp, #40	; 0x28
 8002b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e10f      	b.n	8002db4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fcb2 	bl	8001518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 ff1f 	bl	8004a16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	687e      	ldr	r6, [r7, #4]
 8002be0:	466d      	mov	r5, sp
 8002be2:	f106 0410 	add.w	r4, r6, #16
 8002be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bf6:	1d33      	adds	r3, r6, #4
 8002bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f001 feaa 	bl	8004954 <USB_CoreInit>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0d0      	b.n	8002db4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 ff0d 	bl	8004a38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	e04a      	b.n	8002cba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	333d      	adds	r3, #61	; 0x3d
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	333c      	adds	r3, #60	; 0x3c
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	b298      	uxth	r0, r3
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3344      	adds	r3, #68	; 0x44
 8002c60:	4602      	mov	r2, r0
 8002c62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3340      	adds	r3, #64	; 0x40
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3348      	adds	r3, #72	; 0x48
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	334c      	adds	r3, #76	; 0x4c
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3354      	adds	r3, #84	; 0x54
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d3af      	bcc.n	8002c24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e044      	b.n	8002d54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	3301      	adds	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d3b5      	bcc.n	8002cca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	687e      	ldr	r6, [r7, #4]
 8002d66:	466d      	mov	r5, sp
 8002d68:	f106 0410 	add.w	r4, r6, #16
 8002d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d7c:	1d33      	adds	r3, r6, #4
 8002d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f001 fea5 	bl	8004ad0 <USB_DevInit>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e00d      	b.n	8002db4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 f870 	bl	8004e92 <USB_DevDisconnect>

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e267      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d075      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dda:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d00c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b85      	ldr	r3, [pc, #532]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d112      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df2:	4b82      	ldr	r3, [pc, #520]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfe:	d10b      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d05b      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x108>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d157      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e242      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x74>
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a75      	ldr	r2, [pc, #468]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e01d      	b.n	8002e6c <HAL_RCC_OscConfig+0xb0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x98>
 8002e3a:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6f      	ldr	r2, [pc, #444]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6c      	ldr	r2, [pc, #432]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_OscConfig+0xb0>
 8002e54:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a68      	ldr	r2, [pc, #416]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b66      	ldr	r3, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a65      	ldr	r2, [pc, #404]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fc3a 	bl	80016ec <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fc36 	bl	80016ec <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e207      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b5b      	ldr	r3, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0xc0>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fc26 	bl	80016ec <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fc22 	bl	80016ec <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e1f3      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	4b51      	ldr	r3, [pc, #324]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xe8>
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d063      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d11c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d116      	bne.n	8002f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x152>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e1c7      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4937      	ldr	r1, [pc, #220]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	e03a      	b.n	8002f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2c:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_RCC_OscConfig+0x244>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe fbdb 	bl	80016ec <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7fe fbd7 	bl	80016ec <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e1a8      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4925      	ldr	r1, [pc, #148]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
 8002f6c:	e015      	b.n	8002f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_RCC_OscConfig+0x244>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fbba 	bl	80016ec <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fe fbb6 	bl	80016ec <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e187      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d036      	beq.n	8003014 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCC_OscConfig+0x248>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fb9a 	bl	80016ec <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fb96 	bl	80016ec <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e167      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x200>
 8002fda:	e01b      	b.n	8003014 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_OscConfig+0x248>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fb83 	bl	80016ec <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	e00e      	b.n	8003008 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fea:	f7fe fb7f 	bl	80016ec <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d907      	bls.n	8003008 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e150      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
 8002ffc:	40023800 	.word	0x40023800
 8003000:	42470000 	.word	0x42470000
 8003004:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003008:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ea      	bne.n	8002fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8097 	beq.w	8003150 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003026:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b7d      	ldr	r3, [pc, #500]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a7c      	ldr	r2, [pc, #496]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b7a      	ldr	r3, [pc, #488]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003052:	4b77      	ldr	r3, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x474>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305e:	4b74      	ldr	r3, [pc, #464]	; (8003230 <HAL_RCC_OscConfig+0x474>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a73      	ldr	r2, [pc, #460]	; (8003230 <HAL_RCC_OscConfig+0x474>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306a:	f7fe fb3f 	bl	80016ec <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003072:	f7fe fb3b 	bl	80016ec <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e10c      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <HAL_RCC_OscConfig+0x474>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2ea>
 8003098:	4b64      	ldr	r3, [pc, #400]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a63      	ldr	r2, [pc, #396]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
 80030a4:	e01c      	b.n	80030e0 <HAL_RCC_OscConfig+0x324>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x30c>
 80030ae:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a5e      	ldr	r2, [pc, #376]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a5b      	ldr	r2, [pc, #364]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0x324>
 80030c8:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a57      	ldr	r2, [pc, #348]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
 80030d4:	4b55      	ldr	r3, [pc, #340]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a54      	ldr	r2, [pc, #336]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe fb00 	bl	80016ec <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe fafc 	bl	80016ec <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0cb      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003106:	4b49      	ldr	r3, [pc, #292]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ee      	beq.n	80030f0 <HAL_RCC_OscConfig+0x334>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003114:	f7fe faea 	bl	80016ec <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe fae6 	bl	80016ec <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0b5      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003132:	4b3e      	ldr	r3, [pc, #248]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1ee      	bne.n	800311c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	4a38      	ldr	r2, [pc, #224]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a1 	beq.w	800329c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800315a:	4b34      	ldr	r3, [pc, #208]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d05c      	beq.n	8003220 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d141      	bne.n	80031f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b31      	ldr	r3, [pc, #196]	; (8003234 <HAL_RCC_OscConfig+0x478>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe faba 	bl	80016ec <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fab6 	bl	80016ec <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e087      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	491b      	ldr	r1, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x478>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe fa8f 	bl	80016ec <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe fa8b 	bl	80016ec <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e05c      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x416>
 80031f0:	e054      	b.n	800329c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_RCC_OscConfig+0x478>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fe fa78 	bl	80016ec <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe fa74 	bl	80016ec <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e045      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x444>
 800321e:	e03d      	b.n	800329c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e038      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000
 8003234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x4ec>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d028      	beq.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d121      	bne.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d11a      	bne.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003270:	4293      	cmp	r3, r2
 8003272:	d111      	bne.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	3b01      	subs	r3, #1
 8003282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0cc      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b68      	ldr	r3, [pc, #416]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d90c      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b65      	ldr	r3, [pc, #404]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0b8      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a58      	ldr	r2, [pc, #352]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800330a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a52      	ldr	r2, [pc, #328]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	494d      	ldr	r1, [pc, #308]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d044      	beq.n	80033cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d119      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e07f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d003      	beq.n	800336a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003366:	2b03      	cmp	r3, #3
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e06f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e067      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338a:	4b37      	ldr	r3, [pc, #220]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4934      	ldr	r1, [pc, #208]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800339c:	f7fe f9a6 	bl	80016ec <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a4:	f7fe f9a2 	bl	80016ec <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e04f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 020c 	and.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d1eb      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d20c      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e032      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4916      	ldr	r1, [pc, #88]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	490e      	ldr	r1, [pc, #56]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003432:	f000 f821 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003436:	4602      	mov	r2, r0
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	490a      	ldr	r1, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	5ccb      	ldrb	r3, [r1, r3]
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe f906 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023c00 	.word	0x40023c00
 8003468:	40023800 	.word	0x40023800
 800346c:	080061ec 	.word	0x080061ec
 8003470:	20000000 	.word	0x20000000
 8003474:	20000004 	.word	0x20000004

08003478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800347c:	b094      	sub	sp, #80	; 0x50
 800347e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	647b      	str	r3, [r7, #68]	; 0x44
 8003484:	2300      	movs	r3, #0
 8003486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003488:	2300      	movs	r3, #0
 800348a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003490:	4b79      	ldr	r3, [pc, #484]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d00d      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x40>
 800349c:	2b08      	cmp	r3, #8
 800349e:	f200 80e1 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x34>
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034aa:	e0db      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_GetSysClockFreq+0x204>)
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034b0:	e0db      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b2:	4b73      	ldr	r3, [pc, #460]	; (8003680 <HAL_RCC_GetSysClockFreq+0x208>)
 80034b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034b6:	e0d8      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b8:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c2:	4b6d      	ldr	r3, [pc, #436]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d063      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ce:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	099b      	lsrs	r3, r3, #6
 80034d4:	2200      	movs	r2, #0
 80034d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30
 80034e2:	2300      	movs	r3, #0
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ea:	4622      	mov	r2, r4
 80034ec:	462b      	mov	r3, r5
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fc:	0150      	lsls	r0, r2, #5
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4621      	mov	r1, r4
 8003504:	1a51      	subs	r1, r2, r1
 8003506:	6139      	str	r1, [r7, #16]
 8003508:	4629      	mov	r1, r5
 800350a:	eb63 0301 	sbc.w	r3, r3, r1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800351c:	4659      	mov	r1, fp
 800351e:	018b      	lsls	r3, r1, #6
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003526:	4651      	mov	r1, sl
 8003528:	018a      	lsls	r2, r1, #6
 800352a:	4651      	mov	r1, sl
 800352c:	ebb2 0801 	subs.w	r8, r2, r1
 8003530:	4659      	mov	r1, fp
 8003532:	eb63 0901 	sbc.w	r9, r3, r1
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354a:	4690      	mov	r8, r2
 800354c:	4699      	mov	r9, r3
 800354e:	4623      	mov	r3, r4
 8003550:	eb18 0303 	adds.w	r3, r8, r3
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	462b      	mov	r3, r5
 8003558:	eb49 0303 	adc.w	r3, r9, r3
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800356a:	4629      	mov	r1, r5
 800356c:	024b      	lsls	r3, r1, #9
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003574:	4621      	mov	r1, r4
 8003576:	024a      	lsls	r2, r1, #9
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357e:	2200      	movs	r2, #0
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
 8003582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003584:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003588:	f7fc fe92 	bl	80002b0 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003594:	e058      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003596:	4b38      	ldr	r3, [pc, #224]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	2200      	movs	r2, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	4611      	mov	r1, r2
 80035a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
 80035ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035b0:	4642      	mov	r2, r8
 80035b2:	464b      	mov	r3, r9
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	0159      	lsls	r1, r3, #5
 80035be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c2:	0150      	lsls	r0, r2, #5
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4641      	mov	r1, r8
 80035ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ce:	4649      	mov	r1, r9
 80035d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035e8:	ebb2 040a 	subs.w	r4, r2, sl
 80035ec:	eb63 050b 	sbc.w	r5, r3, fp
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	00eb      	lsls	r3, r5, #3
 80035fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fe:	00e2      	lsls	r2, r4, #3
 8003600:	4614      	mov	r4, r2
 8003602:	461d      	mov	r5, r3
 8003604:	4643      	mov	r3, r8
 8003606:	18e3      	adds	r3, r4, r3
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	464b      	mov	r3, r9
 800360c:	eb45 0303 	adc.w	r3, r5, r3
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361e:	4629      	mov	r1, r5
 8003620:	028b      	lsls	r3, r1, #10
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003628:	4621      	mov	r1, r4
 800362a:	028a      	lsls	r2, r1, #10
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003632:	2200      	movs	r2, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	61fa      	str	r2, [r7, #28]
 8003638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800363c:	f7fc fe38 	bl	80002b0 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	3301      	adds	r3, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800365a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003662:	e002      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetSysClockFreq+0x204>)
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800366c:	4618      	mov	r0, r3
 800366e:	3750      	adds	r7, #80	; 0x50
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	00f42400 	.word	0x00f42400
 8003680:	007a1200 	.word	0x007a1200

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000000 	.word	0x20000000

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a9b      	lsrs	r3, r3, #10
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	080061fc 	.word	0x080061fc

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c8:	f7ff ffdc 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0b5b      	lsrs	r3, r3, #13
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4903      	ldr	r1, [pc, #12]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	080061fc 	.word	0x080061fc

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e03f      	b.n	800377e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fe24 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fe9b 	bl	800446c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b08c      	sub	sp, #48	; 0x30
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	d152      	bne.n	8003846 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e04b      	b.n	8003848 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e044      	b.n	8003848 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fbea 	bl	8003fac <UART_Start_Receive_DMA>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80037de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d12c      	bne.n	8003840 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d125      	bne.n	800383a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	617b      	str	r3, [r7, #20]
   return(result);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f043 0310 	orr.w	r3, r3, #16
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003824:	627a      	str	r2, [r7, #36]	; 0x24
 8003826:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6a39      	ldr	r1, [r7, #32]
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	61fb      	str	r3, [r7, #28]
   return(result);
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e5      	bne.n	8003804 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003838:	e002      	b.n	8003840 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003844:	e000      	b.n	8003848 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3730      	adds	r7, #48	; 0x30
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b0ba      	sub	sp, #232	; 0xe8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800388e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_UART_IRQHandler+0x66>
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fd21 	bl	80042f6 <UART_Receive_IT>
      return;
 80038b4:	e256      	b.n	8003d64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80de 	beq.w	8003a7c <HAL_UART_IRQHandler+0x22c>
 80038c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80d1 	beq.w	8003a7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_UART_IRQHandler+0xae>
 80038e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f043 0201 	orr.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_UART_IRQHandler+0xd2>
 800390a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0xf6>
 800392e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f043 0204 	orr.w	r2, r3, #4
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <HAL_UART_IRQHandler+0x126>
 8003952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d105      	bne.n	800396a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800395e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0208 	orr.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 81ed 	beq.w	8003d5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_UART_IRQHandler+0x14e>
 800398c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fcac 	bl	80042f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_UART_IRQHandler+0x17a>
 80039c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d04f      	beq.n	8003a6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fbb4 	bl	8004138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d141      	bne.n	8003a62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3314      	adds	r3, #20
 8003a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1d9      	bne.n	80039de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d013      	beq.n	8003a5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	4a7d      	ldr	r2, [pc, #500]	; (8003c2c <HAL_UART_IRQHandler+0x3dc>)
 8003a38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe f90c 	bl	8001c5c <HAL_DMA_Abort_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a54:	4610      	mov	r0, r2
 8003a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	e00e      	b.n	8003a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9a4 	bl	8003da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	e00a      	b.n	8003a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9a0 	bl	8003da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	e006      	b.n	8003a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f99c 	bl	8003da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a76:	e170      	b.n	8003d5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	bf00      	nop
    return;
 8003a7a:	e16e      	b.n	8003d5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	f040 814a 	bne.w	8003d1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8143 	beq.w	8003d1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 813c 	beq.w	8003d1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	f040 80b4 	bne.w	8003c30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8140 	beq.w	8003d5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	f080 8139 	bcs.w	8003d5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003af2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afe:	f000 8088 	beq.w	8003c12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	330c      	adds	r3, #12
 8003b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1d9      	bne.n	8003b02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3314      	adds	r3, #20
 8003b54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3314      	adds	r3, #20
 8003b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e1      	bne.n	8003b4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3314      	adds	r3, #20
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3314      	adds	r3, #20
 8003baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e3      	bne.n	8003b8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be2:	f023 0310 	bic.w	r3, r3, #16
 8003be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e3      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd ffb5 	bl	8001b7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd f9e0 	bl	8000fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c28:	e099      	b.n	8003d5e <HAL_UART_IRQHandler+0x50e>
 8003c2a:	bf00      	nop
 8003c2c:	080041ff 	.word	0x080041ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 808b 	beq.w	8003d62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8086 	beq.w	8003d62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e3      	bne.n	8003c56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3314      	adds	r3, #20
 8003cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cb2:	633a      	str	r2, [r7, #48]	; 0x30
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e3      	bne.n	8003c8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0310 	bic.w	r3, r3, #16
 8003cea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cf8:	61fa      	str	r2, [r7, #28]
 8003cfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	617b      	str	r3, [r7, #20]
   return(result);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e3      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd f968 	bl	8000fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d18:	e023      	b.n	8003d62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_UART_IRQHandler+0x4ea>
 8003d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fa77 	bl	8004226 <UART_Transmit_IT>
    return;
 8003d38:	e014      	b.n	8003d64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <HAL_UART_IRQHandler+0x514>
 8003d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fab7 	bl	80042c6 <UART_EndTransmit_IT>
    return;
 8003d58:	e004      	b.n	8003d64 <HAL_UART_IRQHandler+0x514>
    return;
 8003d5a:	bf00      	nop
 8003d5c:	e002      	b.n	8003d64 <HAL_UART_IRQHandler+0x514>
      return;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <HAL_UART_IRQHandler+0x514>
      return;
 8003d62:	bf00      	nop
  }
}
 8003d64:	37e8      	adds	r7, #232	; 0xe8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop

08003d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b09c      	sub	sp, #112	; 0x70
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d172      	bne.n	8003ebe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dda:	2200      	movs	r2, #0
 8003ddc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e00:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	667b      	str	r3, [r7, #100]	; 0x64
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e32:	647a      	str	r2, [r7, #68]	; 0x44
 8003e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e5      	bne.n	8003e12 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	623b      	str	r3, [r7, #32]
   return(result);
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e66:	633a      	str	r2, [r7, #48]	; 0x30
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d119      	bne.n	8003ebe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f023 0310 	bic.w	r3, r3, #16
 8003ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eaa:	61fa      	str	r2, [r7, #28]
 8003eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	69b9      	ldr	r1, [r7, #24]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e5      	bne.n	8003e8a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d106      	bne.n	8003ed4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ece:	f7fd f88b 	bl	8000fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ed2:	e002      	b.n	8003eda <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003ed4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ed6:	f7ff ff53 	bl	8003d80 <HAL_UART_RxCpltCallback>
}
 8003eda:	bf00      	nop
 8003edc:	3770      	adds	r7, #112	; 0x70
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d108      	bne.n	8003f0a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7fd f870 	bl	8000fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f08:	e002      	b.n	8003f10 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff42 	bl	8003d94 <HAL_UART_RxHalfCpltCallback>
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b21      	cmp	r3, #33	; 0x21
 8003f4a:	d108      	bne.n	8003f5e <UART_DMAError+0x46>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2200      	movs	r2, #0
 8003f56:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f58:	68b8      	ldr	r0, [r7, #8]
 8003f5a:	f000 f8c5 	bl	80040e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b22      	cmp	r3, #34	; 0x22
 8003f7e:	d108      	bne.n	8003f92 <UART_DMAError+0x7a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f8c:	68b8      	ldr	r0, [r7, #8]
 8003f8e:	f000 f8d3 	bl	8004138 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9e:	68b8      	ldr	r0, [r7, #8]
 8003fa0:	f7ff ff02 	bl	8003da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b098      	sub	sp, #96	; 0x60
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2222      	movs	r2, #34	; 0x22
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	4a40      	ldr	r2, [pc, #256]	; (80040dc <UART_Start_Receive_DMA+0x130>)
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	4a3f      	ldr	r2, [pc, #252]	; (80040e0 <UART_Start_Receive_DMA+0x134>)
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	4a3e      	ldr	r2, [pc, #248]	; (80040e4 <UART_Start_Receive_DMA+0x138>)
 8003fea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ff4:	f107 0308 	add.w	r3, r7, #8
 8003ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	f7fd fd5e 	bl	8001acc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d019      	beq.n	800406a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	65bb      	str	r3, [r7, #88]	; 0x58
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004056:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004058:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800405c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e5      	bne.n	8004036 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	657b      	str	r3, [r7, #84]	; 0x54
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3314      	adds	r3, #20
 8004088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800408a:	63ba      	str	r2, [r7, #56]	; 0x38
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	617b      	str	r3, [r7, #20]
   return(result);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b4:	653b      	str	r3, [r7, #80]	; 0x50
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3314      	adds	r3, #20
 80040bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040be:	627a      	str	r2, [r7, #36]	; 0x24
 80040c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6a39      	ldr	r1, [r7, #32]
 80040c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e5      	bne.n	800409e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3760      	adds	r7, #96	; 0x60
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	08003dbd 	.word	0x08003dbd
 80040e0:	08003ee3 	.word	0x08003ee3
 80040e4:	08003f19 	.word	0x08003f19

080040e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	61ba      	str	r2, [r7, #24]
 8004112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	613b      	str	r3, [r7, #16]
   return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e5      	bne.n	80040f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800412c:	bf00      	nop
 800412e:	3724      	adds	r7, #36	; 0x24
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b095      	sub	sp, #84	; 0x54
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004160:	643a      	str	r2, [r7, #64]	; 0x40
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	61fb      	str	r3, [r7, #28]
   return(result);
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	64bb      	str	r3, [r7, #72]	; 0x48
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800419a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d119      	bne.n	80041e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f023 0310 	bic.w	r3, r3, #16
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041d0:	61ba      	str	r2, [r7, #24]
 80041d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6979      	ldr	r1, [r7, #20]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	613b      	str	r3, [r7, #16]
   return(result);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041f2:	bf00      	nop
 80041f4:	3754      	adds	r7, #84	; 0x54
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff fdc5 	bl	8003da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b21      	cmp	r3, #33	; 0x21
 8004238:	d13e      	bne.n	80042b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004242:	d114      	bne.n	800426e <UART_Transmit_IT+0x48>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d110      	bne.n	800426e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004260:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	621a      	str	r2, [r3, #32]
 800426c:	e008      	b.n	8004280 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	1c59      	adds	r1, r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6211      	str	r1, [r2, #32]
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4619      	mov	r1, r3
 800428e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10f      	bne.n	80042b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fd40 	bl	8003d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b08c      	sub	sp, #48	; 0x30
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b22      	cmp	r3, #34	; 0x22
 8004308:	f040 80ab 	bne.w	8004462 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004314:	d117      	bne.n	8004346 <UART_Receive_IT+0x50>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d113      	bne.n	8004346 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004334:	b29a      	uxth	r2, r3
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	1c9a      	adds	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
 8004344:	e026      	b.n	8004394 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d007      	beq.n	800436a <UART_Receive_IT+0x74>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <UART_Receive_IT+0x82>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	e008      	b.n	800438a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004384:	b2da      	uxtb	r2, r3
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4619      	mov	r1, r3
 80043a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d15a      	bne.n	800445e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0220 	bic.w	r2, r2, #32
 80043b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d135      	bne.n	8004454 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	613b      	str	r3, [r7, #16]
   return(result);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f023 0310 	bic.w	r3, r3, #16
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	623a      	str	r2, [r7, #32]
 8004410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	69f9      	ldr	r1, [r7, #28]
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	61bb      	str	r3, [r7, #24]
   return(result);
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e5      	bne.n	80043ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b10      	cmp	r3, #16
 800442e:	d10a      	bne.n	8004446 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fc fdcb 	bl	8000fe8 <HAL_UARTEx_RxEventCallback>
 8004452:	e002      	b.n	800445a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fc93 	bl	8003d80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e002      	b.n	8004464 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3730      	adds	r7, #48	; 0x30
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004470:	b0c0      	sub	sp, #256	; 0x100
 8004472:	af00      	add	r7, sp, #0
 8004474:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	68d9      	ldr	r1, [r3, #12]
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	ea40 0301 	orr.w	r3, r0, r1
 8004494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044c4:	f021 010c 	bic.w	r1, r1, #12
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044d2:	430b      	orrs	r3, r1
 80044d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	6999      	ldr	r1, [r3, #24]
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	ea40 0301 	orr.w	r3, r0, r1
 80044f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b8f      	ldr	r3, [pc, #572]	; (8004738 <UART_SetConfig+0x2cc>)
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d005      	beq.n	800450c <UART_SetConfig+0xa0>
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b8d      	ldr	r3, [pc, #564]	; (800473c <UART_SetConfig+0x2d0>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d104      	bne.n	8004516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7ff f8da 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 8004510:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004514:	e003      	b.n	800451e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004516:	f7ff f8c1 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 800451a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004528:	f040 810c 	bne.w	8004744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800452c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004530:	2200      	movs	r2, #0
 8004532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004536:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800453a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800453e:	4622      	mov	r2, r4
 8004540:	462b      	mov	r3, r5
 8004542:	1891      	adds	r1, r2, r2
 8004544:	65b9      	str	r1, [r7, #88]	; 0x58
 8004546:	415b      	adcs	r3, r3
 8004548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800454a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800454e:	4621      	mov	r1, r4
 8004550:	eb12 0801 	adds.w	r8, r2, r1
 8004554:	4629      	mov	r1, r5
 8004556:	eb43 0901 	adc.w	r9, r3, r1
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800456a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456e:	4690      	mov	r8, r2
 8004570:	4699      	mov	r9, r3
 8004572:	4623      	mov	r3, r4
 8004574:	eb18 0303 	adds.w	r3, r8, r3
 8004578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800457c:	462b      	mov	r3, r5
 800457e:	eb49 0303 	adc.w	r3, r9, r3
 8004582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800459a:	460b      	mov	r3, r1
 800459c:	18db      	adds	r3, r3, r3
 800459e:	653b      	str	r3, [r7, #80]	; 0x50
 80045a0:	4613      	mov	r3, r2
 80045a2:	eb42 0303 	adc.w	r3, r2, r3
 80045a6:	657b      	str	r3, [r7, #84]	; 0x54
 80045a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045b0:	f7fb fe7e 	bl	80002b0 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4b61      	ldr	r3, [pc, #388]	; (8004740 <UART_SetConfig+0x2d4>)
 80045ba:	fba3 2302 	umull	r2, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	011c      	lsls	r4, r3, #4
 80045c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	64b9      	str	r1, [r7, #72]	; 0x48
 80045dc:	415b      	adcs	r3, r3
 80045de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045e4:	4641      	mov	r1, r8
 80045e6:	eb12 0a01 	adds.w	sl, r2, r1
 80045ea:	4649      	mov	r1, r9
 80045ec:	eb43 0b01 	adc.w	fp, r3, r1
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004604:	4692      	mov	sl, r2
 8004606:	469b      	mov	fp, r3
 8004608:	4643      	mov	r3, r8
 800460a:	eb1a 0303 	adds.w	r3, sl, r3
 800460e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004612:	464b      	mov	r3, r9
 8004614:	eb4b 0303 	adc.w	r3, fp, r3
 8004618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004628:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800462c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004630:	460b      	mov	r3, r1
 8004632:	18db      	adds	r3, r3, r3
 8004634:	643b      	str	r3, [r7, #64]	; 0x40
 8004636:	4613      	mov	r3, r2
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	647b      	str	r3, [r7, #68]	; 0x44
 800463e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004646:	f7fb fe33 	bl	80002b0 <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4611      	mov	r1, r2
 8004650:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <UART_SetConfig+0x2d4>)
 8004652:	fba3 2301 	umull	r2, r3, r3, r1
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	2264      	movs	r2, #100	; 0x64
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	1acb      	subs	r3, r1, r3
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004666:	4b36      	ldr	r3, [pc, #216]	; (8004740 <UART_SetConfig+0x2d4>)
 8004668:	fba3 2302 	umull	r2, r3, r3, r2
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004674:	441c      	add	r4, r3
 8004676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004680:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004688:	4642      	mov	r2, r8
 800468a:	464b      	mov	r3, r9
 800468c:	1891      	adds	r1, r2, r2
 800468e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004690:	415b      	adcs	r3, r3
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004698:	4641      	mov	r1, r8
 800469a:	1851      	adds	r1, r2, r1
 800469c:	6339      	str	r1, [r7, #48]	; 0x30
 800469e:	4649      	mov	r1, r9
 80046a0:	414b      	adcs	r3, r1
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046b0:	4659      	mov	r1, fp
 80046b2:	00cb      	lsls	r3, r1, #3
 80046b4:	4651      	mov	r1, sl
 80046b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ba:	4651      	mov	r1, sl
 80046bc:	00ca      	lsls	r2, r1, #3
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	4603      	mov	r3, r0
 80046c4:	4642      	mov	r2, r8
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046cc:	464b      	mov	r3, r9
 80046ce:	460a      	mov	r2, r1
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046ec:	460b      	mov	r3, r1
 80046ee:	18db      	adds	r3, r3, r3
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f2:	4613      	mov	r3, r2
 80046f4:	eb42 0303 	adc.w	r3, r2, r3
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004702:	f7fb fdd5 	bl	80002b0 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <UART_SetConfig+0x2d4>)
 800470c:	fba3 1302 	umull	r1, r3, r3, r2
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	2164      	movs	r1, #100	; 0x64
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	3332      	adds	r3, #50	; 0x32
 800471e:	4a08      	ldr	r2, [pc, #32]	; (8004740 <UART_SetConfig+0x2d4>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	f003 0207 	and.w	r2, r3, #7
 800472a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4422      	add	r2, r4
 8004732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004734:	e105      	b.n	8004942 <UART_SetConfig+0x4d6>
 8004736:	bf00      	nop
 8004738:	40011000 	.word	0x40011000
 800473c:	40011400 	.word	0x40011400
 8004740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004748:	2200      	movs	r2, #0
 800474a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800474e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004756:	4642      	mov	r2, r8
 8004758:	464b      	mov	r3, r9
 800475a:	1891      	adds	r1, r2, r2
 800475c:	6239      	str	r1, [r7, #32]
 800475e:	415b      	adcs	r3, r3
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
 8004762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004766:	4641      	mov	r1, r8
 8004768:	1854      	adds	r4, r2, r1
 800476a:	4649      	mov	r1, r9
 800476c:	eb43 0501 	adc.w	r5, r3, r1
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	00eb      	lsls	r3, r5, #3
 800477a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800477e:	00e2      	lsls	r2, r4, #3
 8004780:	4614      	mov	r4, r2
 8004782:	461d      	mov	r5, r3
 8004784:	4643      	mov	r3, r8
 8004786:	18e3      	adds	r3, r4, r3
 8004788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800478c:	464b      	mov	r3, r9
 800478e:	eb45 0303 	adc.w	r3, r5, r3
 8004792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047b2:	4629      	mov	r1, r5
 80047b4:	008b      	lsls	r3, r1, #2
 80047b6:	4621      	mov	r1, r4
 80047b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047bc:	4621      	mov	r1, r4
 80047be:	008a      	lsls	r2, r1, #2
 80047c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047c4:	f7fb fd74 	bl	80002b0 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4b60      	ldr	r3, [pc, #384]	; (8004950 <UART_SetConfig+0x4e4>)
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	011c      	lsls	r4, r3, #4
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	61b9      	str	r1, [r7, #24]
 80047f0:	415b      	adcs	r3, r3
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f8:	4641      	mov	r1, r8
 80047fa:	1851      	adds	r1, r2, r1
 80047fc:	6139      	str	r1, [r7, #16]
 80047fe:	4649      	mov	r1, r9
 8004800:	414b      	adcs	r3, r1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004810:	4659      	mov	r1, fp
 8004812:	00cb      	lsls	r3, r1, #3
 8004814:	4651      	mov	r1, sl
 8004816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481a:	4651      	mov	r1, sl
 800481c:	00ca      	lsls	r2, r1, #3
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	4603      	mov	r3, r0
 8004824:	4642      	mov	r2, r8
 8004826:	189b      	adds	r3, r3, r2
 8004828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800482c:	464b      	mov	r3, r9
 800482e:	460a      	mov	r2, r1
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	67bb      	str	r3, [r7, #120]	; 0x78
 8004842:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004850:	4649      	mov	r1, r9
 8004852:	008b      	lsls	r3, r1, #2
 8004854:	4641      	mov	r1, r8
 8004856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800485a:	4641      	mov	r1, r8
 800485c:	008a      	lsls	r2, r1, #2
 800485e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004862:	f7fb fd25 	bl	80002b0 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <UART_SetConfig+0x4e4>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	; 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a34      	ldr	r2, [pc, #208]	; (8004950 <UART_SetConfig+0x4e4>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488a:	441c      	add	r4, r3
 800488c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004890:	2200      	movs	r2, #0
 8004892:	673b      	str	r3, [r7, #112]	; 0x70
 8004894:	677a      	str	r2, [r7, #116]	; 0x74
 8004896:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800489a:	4642      	mov	r2, r8
 800489c:	464b      	mov	r3, r9
 800489e:	1891      	adds	r1, r2, r2
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	415b      	adcs	r3, r3
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048aa:	4641      	mov	r1, r8
 80048ac:	1851      	adds	r1, r2, r1
 80048ae:	6039      	str	r1, [r7, #0]
 80048b0:	4649      	mov	r1, r9
 80048b2:	414b      	adcs	r3, r1
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048c2:	4659      	mov	r1, fp
 80048c4:	00cb      	lsls	r3, r1, #3
 80048c6:	4651      	mov	r1, sl
 80048c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048cc:	4651      	mov	r1, sl
 80048ce:	00ca      	lsls	r2, r1, #3
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	4603      	mov	r3, r0
 80048d6:	4642      	mov	r2, r8
 80048d8:	189b      	adds	r3, r3, r2
 80048da:	66bb      	str	r3, [r7, #104]	; 0x68
 80048dc:	464b      	mov	r3, r9
 80048de:	460a      	mov	r2, r1
 80048e0:	eb42 0303 	adc.w	r3, r2, r3
 80048e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	663b      	str	r3, [r7, #96]	; 0x60
 80048f0:	667a      	str	r2, [r7, #100]	; 0x64
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048fe:	4649      	mov	r1, r9
 8004900:	008b      	lsls	r3, r1, #2
 8004902:	4641      	mov	r1, r8
 8004904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004908:	4641      	mov	r1, r8
 800490a:	008a      	lsls	r2, r1, #2
 800490c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004910:	f7fb fcce 	bl	80002b0 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <UART_SetConfig+0x4e4>)
 800491a:	fba3 1302 	umull	r1, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2164      	movs	r1, #100	; 0x64
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	3332      	adds	r3, #50	; 0x32
 800492c:	4a08      	ldr	r2, [pc, #32]	; (8004950 <UART_SetConfig+0x4e4>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	f003 020f 	and.w	r2, r3, #15
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4422      	add	r2, r4
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494e:	bf00      	nop
 8004950:	51eb851f 	.word	0x51eb851f

08004954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004954:	b084      	sub	sp, #16
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	f107 001c 	add.w	r0, r7, #28
 8004962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	2b01      	cmp	r3, #1
 800496a:	d122      	bne.n	80049b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d105      	bne.n	80049a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 faa2 	bl	8004ef0 <USB_CoreReset>
 80049ac:	4603      	mov	r3, r0
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e01a      	b.n	80049e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa96 	bl	8004ef0 <USB_CoreReset>
 80049c4:	4603      	mov	r3, r0
 80049c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
 80049da:	e005      	b.n	80049e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d10b      	bne.n	8004a06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f043 0206 	orr.w	r2, r3, #6
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a12:	b004      	add	sp, #16
 8004a14:	4770      	bx	lr

08004a16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 0201 	bic.w	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d115      	bne.n	8004a86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a66:	2001      	movs	r0, #1
 8004a68:	f7fc fe4c 	bl	8001704 <HAL_Delay>
      ms++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa2e 	bl	8004ed4 <USB_GetMode>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d01e      	beq.n	8004abc <USB_SetCurrentMode+0x84>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b31      	cmp	r3, #49	; 0x31
 8004a82:	d9f0      	bls.n	8004a66 <USB_SetCurrentMode+0x2e>
 8004a84:	e01a      	b.n	8004abc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d115      	bne.n	8004ab8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f7fc fe33 	bl	8001704 <HAL_Delay>
      ms++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa15 	bl	8004ed4 <USB_GetMode>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <USB_SetCurrentMode+0x84>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b31      	cmp	r3, #49	; 0x31
 8004ab4:	d9f0      	bls.n	8004a98 <USB_SetCurrentMode+0x60>
 8004ab6:	e001      	b.n	8004abc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e005      	b.n	8004ac8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b32      	cmp	r3, #50	; 0x32
 8004ac0:	d101      	bne.n	8004ac6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	e009      	b.n	8004b04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	3340      	adds	r3, #64	; 0x40
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	2200      	movs	r2, #0
 8004afc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	3301      	adds	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b0e      	cmp	r3, #14
 8004b08:	d9f2      	bls.n	8004af0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d11c      	bne.n	8004b4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
 8004b48:	e00b      	b.n	8004b62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b74:	4619      	mov	r1, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	680b      	ldr	r3, [r1, #0]
 8004b80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10c      	bne.n	8004ba2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b8e:	2100      	movs	r1, #0
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f965 	bl	8004e60 <USB_SetDevSpeed>
 8004b96:	e008      	b.n	8004baa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b98:	2101      	movs	r1, #1
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f960 	bl	8004e60 <USB_SetDevSpeed>
 8004ba0:	e003      	b.n	8004baa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f95b 	bl	8004e60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004baa:	2110      	movs	r1, #16
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8f3 	bl	8004d98 <USB_FlushTxFifo>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f91f 	bl	8004e00 <USB_FlushRxFifo>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	461a      	mov	r2, r3
 8004be0:	2300      	movs	r3, #0
 8004be2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bea:	461a      	mov	r2, r3
 8004bec:	2300      	movs	r3, #0
 8004bee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e043      	b.n	8004c7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0c:	d118      	bne.n	8004c40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e013      	b.n	8004c52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	461a      	mov	r2, r3
 8004c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e008      	b.n	8004c52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2300      	movs	r3, #0
 8004c62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	461a      	mov	r2, r3
 8004c72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d3b7      	bcc.n	8004bf6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	e043      	b.n	8004d14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca2:	d118      	bne.n	8004cd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e013      	b.n	8004ce8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e008      	b.n	8004ce8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	461a      	mov	r2, r3
 8004d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	3301      	adds	r3, #1
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d3b7      	bcc.n	8004c8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f043 0210 	orr.w	r2, r3, #16
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <USB_DevInit+0x2c4>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f043 0208 	orr.w	r2, r3, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d7c:	f043 0304 	orr.w	r3, r3, #4
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d90:	b004      	add	sp, #16
 8004d92:	4770      	bx	lr
 8004d94:	803c3800 	.word	0x803c3800

08004d98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <USB_FlushTxFifo+0x64>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e01b      	b.n	8004df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	daf2      	bge.n	8004da6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	019b      	lsls	r3, r3, #6
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <USB_FlushTxFifo+0x64>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e006      	b.n	8004df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d0f0      	beq.n	8004dd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	00030d40 	.word	0x00030d40

08004e00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <USB_FlushRxFifo+0x5c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e018      	b.n	8004e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	daf2      	bge.n	8004e0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <USB_FlushRxFifo+0x5c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e006      	b.n	8004e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d0f0      	beq.n	8004e30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	00030d40 	.word	0x00030d40

08004e60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e80:	4313      	orrs	r3, r2
 8004e82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004eac:	f023 0303 	bic.w	r3, r3, #3
 8004eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <USB_CoreReset+0x64>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e01b      	b.n	8004f46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	daf2      	bge.n	8004efc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f043 0201 	orr.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <USB_CoreReset+0x64>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e006      	b.n	8004f46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d0f0      	beq.n	8004f26 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	00030d40 	.word	0x00030d40

08004f58 <atoi>:
 8004f58:	220a      	movs	r2, #10
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	f000 b91e 	b.w	800519c <strtol>

08004f60 <__errno>:
 8004f60:	4b01      	ldr	r3, [pc, #4]	; (8004f68 <__errno+0x8>)
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	2000000c 	.word	0x2000000c

08004f6c <__libc_init_array>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	4d0d      	ldr	r5, [pc, #52]	; (8004fa4 <__libc_init_array+0x38>)
 8004f70:	4c0d      	ldr	r4, [pc, #52]	; (8004fa8 <__libc_init_array+0x3c>)
 8004f72:	1b64      	subs	r4, r4, r5
 8004f74:	10a4      	asrs	r4, r4, #2
 8004f76:	2600      	movs	r6, #0
 8004f78:	42a6      	cmp	r6, r4
 8004f7a:	d109      	bne.n	8004f90 <__libc_init_array+0x24>
 8004f7c:	4d0b      	ldr	r5, [pc, #44]	; (8004fac <__libc_init_array+0x40>)
 8004f7e:	4c0c      	ldr	r4, [pc, #48]	; (8004fb0 <__libc_init_array+0x44>)
 8004f80:	f001 f910 	bl	80061a4 <_init>
 8004f84:	1b64      	subs	r4, r4, r5
 8004f86:	10a4      	asrs	r4, r4, #2
 8004f88:	2600      	movs	r6, #0
 8004f8a:	42a6      	cmp	r6, r4
 8004f8c:	d105      	bne.n	8004f9a <__libc_init_array+0x2e>
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f94:	4798      	blx	r3
 8004f96:	3601      	adds	r6, #1
 8004f98:	e7ee      	b.n	8004f78 <__libc_init_array+0xc>
 8004f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9e:	4798      	blx	r3
 8004fa0:	3601      	adds	r6, #1
 8004fa2:	e7f2      	b.n	8004f8a <__libc_init_array+0x1e>
 8004fa4:	0800645c 	.word	0x0800645c
 8004fa8:	0800645c 	.word	0x0800645c
 8004fac:	0800645c 	.word	0x0800645c
 8004fb0:	08006460 	.word	0x08006460

08004fb4 <memset>:
 8004fb4:	4402      	add	r2, r0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d100      	bne.n	8004fbe <memset+0xa>
 8004fbc:	4770      	bx	lr
 8004fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc2:	e7f9      	b.n	8004fb8 <memset+0x4>

08004fc4 <strchr>:
 8004fc4:	b2c9      	uxtb	r1, r1
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fcc:	b11a      	cbz	r2, 8004fd6 <strchr+0x12>
 8004fce:	428a      	cmp	r2, r1
 8004fd0:	d1f9      	bne.n	8004fc6 <strchr+0x2>
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	4770      	bx	lr
 8004fd6:	2900      	cmp	r1, #0
 8004fd8:	bf18      	it	ne
 8004fda:	2300      	movne	r3, #0
 8004fdc:	e7f9      	b.n	8004fd2 <strchr+0xe>
	...

08004fe0 <strtok>:
 8004fe0:	4b16      	ldr	r3, [pc, #88]	; (800503c <strtok+0x5c>)
 8004fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fe4:	681e      	ldr	r6, [r3, #0]
 8004fe6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004fe8:	4605      	mov	r5, r0
 8004fea:	b9fc      	cbnz	r4, 800502c <strtok+0x4c>
 8004fec:	2050      	movs	r0, #80	; 0x50
 8004fee:	9101      	str	r1, [sp, #4]
 8004ff0:	f000 f90e 	bl	8005210 <malloc>
 8004ff4:	9901      	ldr	r1, [sp, #4]
 8004ff6:	65b0      	str	r0, [r6, #88]	; 0x58
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	b920      	cbnz	r0, 8005006 <strtok+0x26>
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <strtok+0x60>)
 8004ffe:	4811      	ldr	r0, [pc, #68]	; (8005044 <strtok+0x64>)
 8005000:	2157      	movs	r1, #87	; 0x57
 8005002:	f000 f8d5 	bl	80051b0 <__assert_func>
 8005006:	e9c0 4400 	strd	r4, r4, [r0]
 800500a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800500e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005012:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005016:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800501a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800501e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005022:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005026:	6184      	str	r4, [r0, #24]
 8005028:	7704      	strb	r4, [r0, #28]
 800502a:	6244      	str	r4, [r0, #36]	; 0x24
 800502c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800502e:	2301      	movs	r3, #1
 8005030:	4628      	mov	r0, r5
 8005032:	b002      	add	sp, #8
 8005034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005038:	f000 b806 	b.w	8005048 <__strtok_r>
 800503c:	2000000c 	.word	0x2000000c
 8005040:	08006210 	.word	0x08006210
 8005044:	08006227 	.word	0x08006227

08005048 <__strtok_r>:
 8005048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504a:	b908      	cbnz	r0, 8005050 <__strtok_r+0x8>
 800504c:	6810      	ldr	r0, [r2, #0]
 800504e:	b188      	cbz	r0, 8005074 <__strtok_r+0x2c>
 8005050:	4604      	mov	r4, r0
 8005052:	4620      	mov	r0, r4
 8005054:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005058:	460f      	mov	r7, r1
 800505a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800505e:	b91e      	cbnz	r6, 8005068 <__strtok_r+0x20>
 8005060:	b965      	cbnz	r5, 800507c <__strtok_r+0x34>
 8005062:	6015      	str	r5, [r2, #0]
 8005064:	4628      	mov	r0, r5
 8005066:	e005      	b.n	8005074 <__strtok_r+0x2c>
 8005068:	42b5      	cmp	r5, r6
 800506a:	d1f6      	bne.n	800505a <__strtok_r+0x12>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f0      	bne.n	8005052 <__strtok_r+0xa>
 8005070:	6014      	str	r4, [r2, #0]
 8005072:	7003      	strb	r3, [r0, #0]
 8005074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005076:	461c      	mov	r4, r3
 8005078:	e00c      	b.n	8005094 <__strtok_r+0x4c>
 800507a:	b915      	cbnz	r5, 8005082 <__strtok_r+0x3a>
 800507c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005080:	460e      	mov	r6, r1
 8005082:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005086:	42ab      	cmp	r3, r5
 8005088:	d1f7      	bne.n	800507a <__strtok_r+0x32>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f3      	beq.n	8005076 <__strtok_r+0x2e>
 800508e:	2300      	movs	r3, #0
 8005090:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005094:	6014      	str	r4, [r2, #0]
 8005096:	e7ed      	b.n	8005074 <__strtok_r+0x2c>

08005098 <_strtol_l.constprop.0>:
 8005098:	2b01      	cmp	r3, #1
 800509a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800509e:	d001      	beq.n	80050a4 <_strtol_l.constprop.0+0xc>
 80050a0:	2b24      	cmp	r3, #36	; 0x24
 80050a2:	d906      	bls.n	80050b2 <_strtol_l.constprop.0+0x1a>
 80050a4:	f7ff ff5c 	bl	8004f60 <__errno>
 80050a8:	2316      	movs	r3, #22
 80050aa:	6003      	str	r3, [r0, #0]
 80050ac:	2000      	movs	r0, #0
 80050ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005198 <_strtol_l.constprop.0+0x100>
 80050b6:	460d      	mov	r5, r1
 80050b8:	462e      	mov	r6, r5
 80050ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80050c2:	f017 0708 	ands.w	r7, r7, #8
 80050c6:	d1f7      	bne.n	80050b8 <_strtol_l.constprop.0+0x20>
 80050c8:	2c2d      	cmp	r4, #45	; 0x2d
 80050ca:	d132      	bne.n	8005132 <_strtol_l.constprop.0+0x9a>
 80050cc:	782c      	ldrb	r4, [r5, #0]
 80050ce:	2701      	movs	r7, #1
 80050d0:	1cb5      	adds	r5, r6, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d05b      	beq.n	800518e <_strtol_l.constprop.0+0xf6>
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d109      	bne.n	80050ee <_strtol_l.constprop.0+0x56>
 80050da:	2c30      	cmp	r4, #48	; 0x30
 80050dc:	d107      	bne.n	80050ee <_strtol_l.constprop.0+0x56>
 80050de:	782c      	ldrb	r4, [r5, #0]
 80050e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80050e4:	2c58      	cmp	r4, #88	; 0x58
 80050e6:	d14d      	bne.n	8005184 <_strtol_l.constprop.0+0xec>
 80050e8:	786c      	ldrb	r4, [r5, #1]
 80050ea:	2310      	movs	r3, #16
 80050ec:	3502      	adds	r5, #2
 80050ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80050f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80050f6:	f04f 0c00 	mov.w	ip, #0
 80050fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80050fe:	4666      	mov	r6, ip
 8005100:	fb03 8a19 	mls	sl, r3, r9, r8
 8005104:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005108:	f1be 0f09 	cmp.w	lr, #9
 800510c:	d816      	bhi.n	800513c <_strtol_l.constprop.0+0xa4>
 800510e:	4674      	mov	r4, lr
 8005110:	42a3      	cmp	r3, r4
 8005112:	dd24      	ble.n	800515e <_strtol_l.constprop.0+0xc6>
 8005114:	f1bc 0f00 	cmp.w	ip, #0
 8005118:	db1e      	blt.n	8005158 <_strtol_l.constprop.0+0xc0>
 800511a:	45b1      	cmp	r9, r6
 800511c:	d31c      	bcc.n	8005158 <_strtol_l.constprop.0+0xc0>
 800511e:	d101      	bne.n	8005124 <_strtol_l.constprop.0+0x8c>
 8005120:	45a2      	cmp	sl, r4
 8005122:	db19      	blt.n	8005158 <_strtol_l.constprop.0+0xc0>
 8005124:	fb06 4603 	mla	r6, r6, r3, r4
 8005128:	f04f 0c01 	mov.w	ip, #1
 800512c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005130:	e7e8      	b.n	8005104 <_strtol_l.constprop.0+0x6c>
 8005132:	2c2b      	cmp	r4, #43	; 0x2b
 8005134:	bf04      	itt	eq
 8005136:	782c      	ldrbeq	r4, [r5, #0]
 8005138:	1cb5      	addeq	r5, r6, #2
 800513a:	e7ca      	b.n	80050d2 <_strtol_l.constprop.0+0x3a>
 800513c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005140:	f1be 0f19 	cmp.w	lr, #25
 8005144:	d801      	bhi.n	800514a <_strtol_l.constprop.0+0xb2>
 8005146:	3c37      	subs	r4, #55	; 0x37
 8005148:	e7e2      	b.n	8005110 <_strtol_l.constprop.0+0x78>
 800514a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800514e:	f1be 0f19 	cmp.w	lr, #25
 8005152:	d804      	bhi.n	800515e <_strtol_l.constprop.0+0xc6>
 8005154:	3c57      	subs	r4, #87	; 0x57
 8005156:	e7db      	b.n	8005110 <_strtol_l.constprop.0+0x78>
 8005158:	f04f 3cff 	mov.w	ip, #4294967295
 800515c:	e7e6      	b.n	800512c <_strtol_l.constprop.0+0x94>
 800515e:	f1bc 0f00 	cmp.w	ip, #0
 8005162:	da05      	bge.n	8005170 <_strtol_l.constprop.0+0xd8>
 8005164:	2322      	movs	r3, #34	; 0x22
 8005166:	6003      	str	r3, [r0, #0]
 8005168:	4646      	mov	r6, r8
 800516a:	b942      	cbnz	r2, 800517e <_strtol_l.constprop.0+0xe6>
 800516c:	4630      	mov	r0, r6
 800516e:	e79e      	b.n	80050ae <_strtol_l.constprop.0+0x16>
 8005170:	b107      	cbz	r7, 8005174 <_strtol_l.constprop.0+0xdc>
 8005172:	4276      	negs	r6, r6
 8005174:	2a00      	cmp	r2, #0
 8005176:	d0f9      	beq.n	800516c <_strtol_l.constprop.0+0xd4>
 8005178:	f1bc 0f00 	cmp.w	ip, #0
 800517c:	d000      	beq.n	8005180 <_strtol_l.constprop.0+0xe8>
 800517e:	1e69      	subs	r1, r5, #1
 8005180:	6011      	str	r1, [r2, #0]
 8005182:	e7f3      	b.n	800516c <_strtol_l.constprop.0+0xd4>
 8005184:	2430      	movs	r4, #48	; 0x30
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1b1      	bne.n	80050ee <_strtol_l.constprop.0+0x56>
 800518a:	2308      	movs	r3, #8
 800518c:	e7af      	b.n	80050ee <_strtol_l.constprop.0+0x56>
 800518e:	2c30      	cmp	r4, #48	; 0x30
 8005190:	d0a5      	beq.n	80050de <_strtol_l.constprop.0+0x46>
 8005192:	230a      	movs	r3, #10
 8005194:	e7ab      	b.n	80050ee <_strtol_l.constprop.0+0x56>
 8005196:	bf00      	nop
 8005198:	080062c1 	.word	0x080062c1

0800519c <strtol>:
 800519c:	4613      	mov	r3, r2
 800519e:	460a      	mov	r2, r1
 80051a0:	4601      	mov	r1, r0
 80051a2:	4802      	ldr	r0, [pc, #8]	; (80051ac <strtol+0x10>)
 80051a4:	6800      	ldr	r0, [r0, #0]
 80051a6:	f7ff bf77 	b.w	8005098 <_strtol_l.constprop.0>
 80051aa:	bf00      	nop
 80051ac:	2000000c 	.word	0x2000000c

080051b0 <__assert_func>:
 80051b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051b2:	4614      	mov	r4, r2
 80051b4:	461a      	mov	r2, r3
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <__assert_func+0x2c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4605      	mov	r5, r0
 80051bc:	68d8      	ldr	r0, [r3, #12]
 80051be:	b14c      	cbz	r4, 80051d4 <__assert_func+0x24>
 80051c0:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <__assert_func+0x30>)
 80051c2:	9100      	str	r1, [sp, #0]
 80051c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051c8:	4906      	ldr	r1, [pc, #24]	; (80051e4 <__assert_func+0x34>)
 80051ca:	462b      	mov	r3, r5
 80051cc:	f000 f80e 	bl	80051ec <fiprintf>
 80051d0:	f000 fcc4 	bl	8005b5c <abort>
 80051d4:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <__assert_func+0x38>)
 80051d6:	461c      	mov	r4, r3
 80051d8:	e7f3      	b.n	80051c2 <__assert_func+0x12>
 80051da:	bf00      	nop
 80051dc:	2000000c 	.word	0x2000000c
 80051e0:	08006284 	.word	0x08006284
 80051e4:	08006291 	.word	0x08006291
 80051e8:	080062bf 	.word	0x080062bf

080051ec <fiprintf>:
 80051ec:	b40e      	push	{r1, r2, r3}
 80051ee:	b503      	push	{r0, r1, lr}
 80051f0:	4601      	mov	r1, r0
 80051f2:	ab03      	add	r3, sp, #12
 80051f4:	4805      	ldr	r0, [pc, #20]	; (800520c <fiprintf+0x20>)
 80051f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	f000 f919 	bl	8005434 <_vfiprintf_r>
 8005202:	b002      	add	sp, #8
 8005204:	f85d eb04 	ldr.w	lr, [sp], #4
 8005208:	b003      	add	sp, #12
 800520a:	4770      	bx	lr
 800520c:	2000000c 	.word	0x2000000c

08005210 <malloc>:
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <malloc+0xc>)
 8005212:	4601      	mov	r1, r0
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	f000 b86f 	b.w	80052f8 <_malloc_r>
 800521a:	bf00      	nop
 800521c:	2000000c 	.word	0x2000000c

08005220 <_free_r>:
 8005220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005222:	2900      	cmp	r1, #0
 8005224:	d044      	beq.n	80052b0 <_free_r+0x90>
 8005226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522a:	9001      	str	r0, [sp, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f1a1 0404 	sub.w	r4, r1, #4
 8005232:	bfb8      	it	lt
 8005234:	18e4      	addlt	r4, r4, r3
 8005236:	f000 feb9 	bl	8005fac <__malloc_lock>
 800523a:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <_free_r+0x94>)
 800523c:	9801      	ldr	r0, [sp, #4]
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	b933      	cbnz	r3, 8005250 <_free_r+0x30>
 8005242:	6063      	str	r3, [r4, #4]
 8005244:	6014      	str	r4, [r2, #0]
 8005246:	b003      	add	sp, #12
 8005248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800524c:	f000 beb4 	b.w	8005fb8 <__malloc_unlock>
 8005250:	42a3      	cmp	r3, r4
 8005252:	d908      	bls.n	8005266 <_free_r+0x46>
 8005254:	6825      	ldr	r5, [r4, #0]
 8005256:	1961      	adds	r1, r4, r5
 8005258:	428b      	cmp	r3, r1
 800525a:	bf01      	itttt	eq
 800525c:	6819      	ldreq	r1, [r3, #0]
 800525e:	685b      	ldreq	r3, [r3, #4]
 8005260:	1949      	addeq	r1, r1, r5
 8005262:	6021      	streq	r1, [r4, #0]
 8005264:	e7ed      	b.n	8005242 <_free_r+0x22>
 8005266:	461a      	mov	r2, r3
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	b10b      	cbz	r3, 8005270 <_free_r+0x50>
 800526c:	42a3      	cmp	r3, r4
 800526e:	d9fa      	bls.n	8005266 <_free_r+0x46>
 8005270:	6811      	ldr	r1, [r2, #0]
 8005272:	1855      	adds	r5, r2, r1
 8005274:	42a5      	cmp	r5, r4
 8005276:	d10b      	bne.n	8005290 <_free_r+0x70>
 8005278:	6824      	ldr	r4, [r4, #0]
 800527a:	4421      	add	r1, r4
 800527c:	1854      	adds	r4, r2, r1
 800527e:	42a3      	cmp	r3, r4
 8005280:	6011      	str	r1, [r2, #0]
 8005282:	d1e0      	bne.n	8005246 <_free_r+0x26>
 8005284:	681c      	ldr	r4, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	6053      	str	r3, [r2, #4]
 800528a:	4421      	add	r1, r4
 800528c:	6011      	str	r1, [r2, #0]
 800528e:	e7da      	b.n	8005246 <_free_r+0x26>
 8005290:	d902      	bls.n	8005298 <_free_r+0x78>
 8005292:	230c      	movs	r3, #12
 8005294:	6003      	str	r3, [r0, #0]
 8005296:	e7d6      	b.n	8005246 <_free_r+0x26>
 8005298:	6825      	ldr	r5, [r4, #0]
 800529a:	1961      	adds	r1, r4, r5
 800529c:	428b      	cmp	r3, r1
 800529e:	bf04      	itt	eq
 80052a0:	6819      	ldreq	r1, [r3, #0]
 80052a2:	685b      	ldreq	r3, [r3, #4]
 80052a4:	6063      	str	r3, [r4, #4]
 80052a6:	bf04      	itt	eq
 80052a8:	1949      	addeq	r1, r1, r5
 80052aa:	6021      	streq	r1, [r4, #0]
 80052ac:	6054      	str	r4, [r2, #4]
 80052ae:	e7ca      	b.n	8005246 <_free_r+0x26>
 80052b0:	b003      	add	sp, #12
 80052b2:	bd30      	pop	{r4, r5, pc}
 80052b4:	200009a4 	.word	0x200009a4

080052b8 <sbrk_aligned>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4e0e      	ldr	r6, [pc, #56]	; (80052f4 <sbrk_aligned+0x3c>)
 80052bc:	460c      	mov	r4, r1
 80052be:	6831      	ldr	r1, [r6, #0]
 80052c0:	4605      	mov	r5, r0
 80052c2:	b911      	cbnz	r1, 80052ca <sbrk_aligned+0x12>
 80052c4:	f000 fb7a 	bl	80059bc <_sbrk_r>
 80052c8:	6030      	str	r0, [r6, #0]
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 fb75 	bl	80059bc <_sbrk_r>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	d00a      	beq.n	80052ec <sbrk_aligned+0x34>
 80052d6:	1cc4      	adds	r4, r0, #3
 80052d8:	f024 0403 	bic.w	r4, r4, #3
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d007      	beq.n	80052f0 <sbrk_aligned+0x38>
 80052e0:	1a21      	subs	r1, r4, r0
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 fb6a 	bl	80059bc <_sbrk_r>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d101      	bne.n	80052f0 <sbrk_aligned+0x38>
 80052ec:	f04f 34ff 	mov.w	r4, #4294967295
 80052f0:	4620      	mov	r0, r4
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	200009a8 	.word	0x200009a8

080052f8 <_malloc_r>:
 80052f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052fc:	1ccd      	adds	r5, r1, #3
 80052fe:	f025 0503 	bic.w	r5, r5, #3
 8005302:	3508      	adds	r5, #8
 8005304:	2d0c      	cmp	r5, #12
 8005306:	bf38      	it	cc
 8005308:	250c      	movcc	r5, #12
 800530a:	2d00      	cmp	r5, #0
 800530c:	4607      	mov	r7, r0
 800530e:	db01      	blt.n	8005314 <_malloc_r+0x1c>
 8005310:	42a9      	cmp	r1, r5
 8005312:	d905      	bls.n	8005320 <_malloc_r+0x28>
 8005314:	230c      	movs	r3, #12
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	2600      	movs	r6, #0
 800531a:	4630      	mov	r0, r6
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	4e2e      	ldr	r6, [pc, #184]	; (80053dc <_malloc_r+0xe4>)
 8005322:	f000 fe43 	bl	8005fac <__malloc_lock>
 8005326:	6833      	ldr	r3, [r6, #0]
 8005328:	461c      	mov	r4, r3
 800532a:	bb34      	cbnz	r4, 800537a <_malloc_r+0x82>
 800532c:	4629      	mov	r1, r5
 800532e:	4638      	mov	r0, r7
 8005330:	f7ff ffc2 	bl	80052b8 <sbrk_aligned>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	4604      	mov	r4, r0
 8005338:	d14d      	bne.n	80053d6 <_malloc_r+0xde>
 800533a:	6834      	ldr	r4, [r6, #0]
 800533c:	4626      	mov	r6, r4
 800533e:	2e00      	cmp	r6, #0
 8005340:	d140      	bne.n	80053c4 <_malloc_r+0xcc>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	4631      	mov	r1, r6
 8005346:	4638      	mov	r0, r7
 8005348:	eb04 0803 	add.w	r8, r4, r3
 800534c:	f000 fb36 	bl	80059bc <_sbrk_r>
 8005350:	4580      	cmp	r8, r0
 8005352:	d13a      	bne.n	80053ca <_malloc_r+0xd2>
 8005354:	6821      	ldr	r1, [r4, #0]
 8005356:	3503      	adds	r5, #3
 8005358:	1a6d      	subs	r5, r5, r1
 800535a:	f025 0503 	bic.w	r5, r5, #3
 800535e:	3508      	adds	r5, #8
 8005360:	2d0c      	cmp	r5, #12
 8005362:	bf38      	it	cc
 8005364:	250c      	movcc	r5, #12
 8005366:	4629      	mov	r1, r5
 8005368:	4638      	mov	r0, r7
 800536a:	f7ff ffa5 	bl	80052b8 <sbrk_aligned>
 800536e:	3001      	adds	r0, #1
 8005370:	d02b      	beq.n	80053ca <_malloc_r+0xd2>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	442b      	add	r3, r5
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	e00e      	b.n	8005398 <_malloc_r+0xa0>
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	1b52      	subs	r2, r2, r5
 800537e:	d41e      	bmi.n	80053be <_malloc_r+0xc6>
 8005380:	2a0b      	cmp	r2, #11
 8005382:	d916      	bls.n	80053b2 <_malloc_r+0xba>
 8005384:	1961      	adds	r1, r4, r5
 8005386:	42a3      	cmp	r3, r4
 8005388:	6025      	str	r5, [r4, #0]
 800538a:	bf18      	it	ne
 800538c:	6059      	strne	r1, [r3, #4]
 800538e:	6863      	ldr	r3, [r4, #4]
 8005390:	bf08      	it	eq
 8005392:	6031      	streq	r1, [r6, #0]
 8005394:	5162      	str	r2, [r4, r5]
 8005396:	604b      	str	r3, [r1, #4]
 8005398:	4638      	mov	r0, r7
 800539a:	f104 060b 	add.w	r6, r4, #11
 800539e:	f000 fe0b 	bl	8005fb8 <__malloc_unlock>
 80053a2:	f026 0607 	bic.w	r6, r6, #7
 80053a6:	1d23      	adds	r3, r4, #4
 80053a8:	1af2      	subs	r2, r6, r3
 80053aa:	d0b6      	beq.n	800531a <_malloc_r+0x22>
 80053ac:	1b9b      	subs	r3, r3, r6
 80053ae:	50a3      	str	r3, [r4, r2]
 80053b0:	e7b3      	b.n	800531a <_malloc_r+0x22>
 80053b2:	6862      	ldr	r2, [r4, #4]
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	bf0c      	ite	eq
 80053b8:	6032      	streq	r2, [r6, #0]
 80053ba:	605a      	strne	r2, [r3, #4]
 80053bc:	e7ec      	b.n	8005398 <_malloc_r+0xa0>
 80053be:	4623      	mov	r3, r4
 80053c0:	6864      	ldr	r4, [r4, #4]
 80053c2:	e7b2      	b.n	800532a <_malloc_r+0x32>
 80053c4:	4634      	mov	r4, r6
 80053c6:	6876      	ldr	r6, [r6, #4]
 80053c8:	e7b9      	b.n	800533e <_malloc_r+0x46>
 80053ca:	230c      	movs	r3, #12
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	4638      	mov	r0, r7
 80053d0:	f000 fdf2 	bl	8005fb8 <__malloc_unlock>
 80053d4:	e7a1      	b.n	800531a <_malloc_r+0x22>
 80053d6:	6025      	str	r5, [r4, #0]
 80053d8:	e7de      	b.n	8005398 <_malloc_r+0xa0>
 80053da:	bf00      	nop
 80053dc:	200009a4 	.word	0x200009a4

080053e0 <__sfputc_r>:
 80053e0:	6893      	ldr	r3, [r2, #8]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	b410      	push	{r4}
 80053e8:	6093      	str	r3, [r2, #8]
 80053ea:	da08      	bge.n	80053fe <__sfputc_r+0x1e>
 80053ec:	6994      	ldr	r4, [r2, #24]
 80053ee:	42a3      	cmp	r3, r4
 80053f0:	db01      	blt.n	80053f6 <__sfputc_r+0x16>
 80053f2:	290a      	cmp	r1, #10
 80053f4:	d103      	bne.n	80053fe <__sfputc_r+0x1e>
 80053f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053fa:	f000 baef 	b.w	80059dc <__swbuf_r>
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	1c58      	adds	r0, r3, #1
 8005402:	6010      	str	r0, [r2, #0]
 8005404:	7019      	strb	r1, [r3, #0]
 8005406:	4608      	mov	r0, r1
 8005408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800540c:	4770      	bx	lr

0800540e <__sfputs_r>:
 800540e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005410:	4606      	mov	r6, r0
 8005412:	460f      	mov	r7, r1
 8005414:	4614      	mov	r4, r2
 8005416:	18d5      	adds	r5, r2, r3
 8005418:	42ac      	cmp	r4, r5
 800541a:	d101      	bne.n	8005420 <__sfputs_r+0x12>
 800541c:	2000      	movs	r0, #0
 800541e:	e007      	b.n	8005430 <__sfputs_r+0x22>
 8005420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005424:	463a      	mov	r2, r7
 8005426:	4630      	mov	r0, r6
 8005428:	f7ff ffda 	bl	80053e0 <__sfputc_r>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d1f3      	bne.n	8005418 <__sfputs_r+0xa>
 8005430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005434 <_vfiprintf_r>:
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005438:	460d      	mov	r5, r1
 800543a:	b09d      	sub	sp, #116	; 0x74
 800543c:	4614      	mov	r4, r2
 800543e:	4698      	mov	r8, r3
 8005440:	4606      	mov	r6, r0
 8005442:	b118      	cbz	r0, 800544c <_vfiprintf_r+0x18>
 8005444:	6983      	ldr	r3, [r0, #24]
 8005446:	b90b      	cbnz	r3, 800544c <_vfiprintf_r+0x18>
 8005448:	f000 fcaa 	bl	8005da0 <__sinit>
 800544c:	4b89      	ldr	r3, [pc, #548]	; (8005674 <_vfiprintf_r+0x240>)
 800544e:	429d      	cmp	r5, r3
 8005450:	d11b      	bne.n	800548a <_vfiprintf_r+0x56>
 8005452:	6875      	ldr	r5, [r6, #4]
 8005454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005456:	07d9      	lsls	r1, r3, #31
 8005458:	d405      	bmi.n	8005466 <_vfiprintf_r+0x32>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	059a      	lsls	r2, r3, #22
 800545e:	d402      	bmi.n	8005466 <_vfiprintf_r+0x32>
 8005460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005462:	f000 fd3b 	bl	8005edc <__retarget_lock_acquire_recursive>
 8005466:	89ab      	ldrh	r3, [r5, #12]
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	d501      	bpl.n	8005470 <_vfiprintf_r+0x3c>
 800546c:	692b      	ldr	r3, [r5, #16]
 800546e:	b9eb      	cbnz	r3, 80054ac <_vfiprintf_r+0x78>
 8005470:	4629      	mov	r1, r5
 8005472:	4630      	mov	r0, r6
 8005474:	f000 fb04 	bl	8005a80 <__swsetup_r>
 8005478:	b1c0      	cbz	r0, 80054ac <_vfiprintf_r+0x78>
 800547a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800547c:	07dc      	lsls	r4, r3, #31
 800547e:	d50e      	bpl.n	800549e <_vfiprintf_r+0x6a>
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	b01d      	add	sp, #116	; 0x74
 8005486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	4b7b      	ldr	r3, [pc, #492]	; (8005678 <_vfiprintf_r+0x244>)
 800548c:	429d      	cmp	r5, r3
 800548e:	d101      	bne.n	8005494 <_vfiprintf_r+0x60>
 8005490:	68b5      	ldr	r5, [r6, #8]
 8005492:	e7df      	b.n	8005454 <_vfiprintf_r+0x20>
 8005494:	4b79      	ldr	r3, [pc, #484]	; (800567c <_vfiprintf_r+0x248>)
 8005496:	429d      	cmp	r5, r3
 8005498:	bf08      	it	eq
 800549a:	68f5      	ldreq	r5, [r6, #12]
 800549c:	e7da      	b.n	8005454 <_vfiprintf_r+0x20>
 800549e:	89ab      	ldrh	r3, [r5, #12]
 80054a0:	0598      	lsls	r0, r3, #22
 80054a2:	d4ed      	bmi.n	8005480 <_vfiprintf_r+0x4c>
 80054a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054a6:	f000 fd1a 	bl	8005ede <__retarget_lock_release_recursive>
 80054aa:	e7e9      	b.n	8005480 <_vfiprintf_r+0x4c>
 80054ac:	2300      	movs	r3, #0
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
 80054b0:	2320      	movs	r3, #32
 80054b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ba:	2330      	movs	r3, #48	; 0x30
 80054bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005680 <_vfiprintf_r+0x24c>
 80054c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054c4:	f04f 0901 	mov.w	r9, #1
 80054c8:	4623      	mov	r3, r4
 80054ca:	469a      	mov	sl, r3
 80054cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054d0:	b10a      	cbz	r2, 80054d6 <_vfiprintf_r+0xa2>
 80054d2:	2a25      	cmp	r2, #37	; 0x25
 80054d4:	d1f9      	bne.n	80054ca <_vfiprintf_r+0x96>
 80054d6:	ebba 0b04 	subs.w	fp, sl, r4
 80054da:	d00b      	beq.n	80054f4 <_vfiprintf_r+0xc0>
 80054dc:	465b      	mov	r3, fp
 80054de:	4622      	mov	r2, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	4630      	mov	r0, r6
 80054e4:	f7ff ff93 	bl	800540e <__sfputs_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	f000 80aa 	beq.w	8005642 <_vfiprintf_r+0x20e>
 80054ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f0:	445a      	add	r2, fp
 80054f2:	9209      	str	r2, [sp, #36]	; 0x24
 80054f4:	f89a 3000 	ldrb.w	r3, [sl]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80a2 	beq.w	8005642 <_vfiprintf_r+0x20e>
 80054fe:	2300      	movs	r3, #0
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005508:	f10a 0a01 	add.w	sl, sl, #1
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	9307      	str	r3, [sp, #28]
 8005510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005514:	931a      	str	r3, [sp, #104]	; 0x68
 8005516:	4654      	mov	r4, sl
 8005518:	2205      	movs	r2, #5
 800551a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551e:	4858      	ldr	r0, [pc, #352]	; (8005680 <_vfiprintf_r+0x24c>)
 8005520:	f7fa fe76 	bl	8000210 <memchr>
 8005524:	9a04      	ldr	r2, [sp, #16]
 8005526:	b9d8      	cbnz	r0, 8005560 <_vfiprintf_r+0x12c>
 8005528:	06d1      	lsls	r1, r2, #27
 800552a:	bf44      	itt	mi
 800552c:	2320      	movmi	r3, #32
 800552e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005532:	0713      	lsls	r3, r2, #28
 8005534:	bf44      	itt	mi
 8005536:	232b      	movmi	r3, #43	; 0x2b
 8005538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800553c:	f89a 3000 	ldrb.w	r3, [sl]
 8005540:	2b2a      	cmp	r3, #42	; 0x2a
 8005542:	d015      	beq.n	8005570 <_vfiprintf_r+0x13c>
 8005544:	9a07      	ldr	r2, [sp, #28]
 8005546:	4654      	mov	r4, sl
 8005548:	2000      	movs	r0, #0
 800554a:	f04f 0c0a 	mov.w	ip, #10
 800554e:	4621      	mov	r1, r4
 8005550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005554:	3b30      	subs	r3, #48	; 0x30
 8005556:	2b09      	cmp	r3, #9
 8005558:	d94e      	bls.n	80055f8 <_vfiprintf_r+0x1c4>
 800555a:	b1b0      	cbz	r0, 800558a <_vfiprintf_r+0x156>
 800555c:	9207      	str	r2, [sp, #28]
 800555e:	e014      	b.n	800558a <_vfiprintf_r+0x156>
 8005560:	eba0 0308 	sub.w	r3, r0, r8
 8005564:	fa09 f303 	lsl.w	r3, r9, r3
 8005568:	4313      	orrs	r3, r2
 800556a:	9304      	str	r3, [sp, #16]
 800556c:	46a2      	mov	sl, r4
 800556e:	e7d2      	b.n	8005516 <_vfiprintf_r+0xe2>
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	1d19      	adds	r1, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	9103      	str	r1, [sp, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	bfbb      	ittet	lt
 800557c:	425b      	neglt	r3, r3
 800557e:	f042 0202 	orrlt.w	r2, r2, #2
 8005582:	9307      	strge	r3, [sp, #28]
 8005584:	9307      	strlt	r3, [sp, #28]
 8005586:	bfb8      	it	lt
 8005588:	9204      	strlt	r2, [sp, #16]
 800558a:	7823      	ldrb	r3, [r4, #0]
 800558c:	2b2e      	cmp	r3, #46	; 0x2e
 800558e:	d10c      	bne.n	80055aa <_vfiprintf_r+0x176>
 8005590:	7863      	ldrb	r3, [r4, #1]
 8005592:	2b2a      	cmp	r3, #42	; 0x2a
 8005594:	d135      	bne.n	8005602 <_vfiprintf_r+0x1ce>
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	1d1a      	adds	r2, r3, #4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	9203      	str	r2, [sp, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bfb8      	it	lt
 80055a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80055a6:	3402      	adds	r4, #2
 80055a8:	9305      	str	r3, [sp, #20]
 80055aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005690 <_vfiprintf_r+0x25c>
 80055ae:	7821      	ldrb	r1, [r4, #0]
 80055b0:	2203      	movs	r2, #3
 80055b2:	4650      	mov	r0, sl
 80055b4:	f7fa fe2c 	bl	8000210 <memchr>
 80055b8:	b140      	cbz	r0, 80055cc <_vfiprintf_r+0x198>
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	eba0 000a 	sub.w	r0, r0, sl
 80055c0:	fa03 f000 	lsl.w	r0, r3, r0
 80055c4:	9b04      	ldr	r3, [sp, #16]
 80055c6:	4303      	orrs	r3, r0
 80055c8:	3401      	adds	r4, #1
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d0:	482c      	ldr	r0, [pc, #176]	; (8005684 <_vfiprintf_r+0x250>)
 80055d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055d6:	2206      	movs	r2, #6
 80055d8:	f7fa fe1a 	bl	8000210 <memchr>
 80055dc:	2800      	cmp	r0, #0
 80055de:	d03f      	beq.n	8005660 <_vfiprintf_r+0x22c>
 80055e0:	4b29      	ldr	r3, [pc, #164]	; (8005688 <_vfiprintf_r+0x254>)
 80055e2:	bb1b      	cbnz	r3, 800562c <_vfiprintf_r+0x1f8>
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	3307      	adds	r3, #7
 80055e8:	f023 0307 	bic.w	r3, r3, #7
 80055ec:	3308      	adds	r3, #8
 80055ee:	9303      	str	r3, [sp, #12]
 80055f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f2:	443b      	add	r3, r7
 80055f4:	9309      	str	r3, [sp, #36]	; 0x24
 80055f6:	e767      	b.n	80054c8 <_vfiprintf_r+0x94>
 80055f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80055fc:	460c      	mov	r4, r1
 80055fe:	2001      	movs	r0, #1
 8005600:	e7a5      	b.n	800554e <_vfiprintf_r+0x11a>
 8005602:	2300      	movs	r3, #0
 8005604:	3401      	adds	r4, #1
 8005606:	9305      	str	r3, [sp, #20]
 8005608:	4619      	mov	r1, r3
 800560a:	f04f 0c0a 	mov.w	ip, #10
 800560e:	4620      	mov	r0, r4
 8005610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005614:	3a30      	subs	r2, #48	; 0x30
 8005616:	2a09      	cmp	r2, #9
 8005618:	d903      	bls.n	8005622 <_vfiprintf_r+0x1ee>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0c5      	beq.n	80055aa <_vfiprintf_r+0x176>
 800561e:	9105      	str	r1, [sp, #20]
 8005620:	e7c3      	b.n	80055aa <_vfiprintf_r+0x176>
 8005622:	fb0c 2101 	mla	r1, ip, r1, r2
 8005626:	4604      	mov	r4, r0
 8005628:	2301      	movs	r3, #1
 800562a:	e7f0      	b.n	800560e <_vfiprintf_r+0x1da>
 800562c:	ab03      	add	r3, sp, #12
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	462a      	mov	r2, r5
 8005632:	4b16      	ldr	r3, [pc, #88]	; (800568c <_vfiprintf_r+0x258>)
 8005634:	a904      	add	r1, sp, #16
 8005636:	4630      	mov	r0, r6
 8005638:	f3af 8000 	nop.w
 800563c:	4607      	mov	r7, r0
 800563e:	1c78      	adds	r0, r7, #1
 8005640:	d1d6      	bne.n	80055f0 <_vfiprintf_r+0x1bc>
 8005642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005644:	07d9      	lsls	r1, r3, #31
 8005646:	d405      	bmi.n	8005654 <_vfiprintf_r+0x220>
 8005648:	89ab      	ldrh	r3, [r5, #12]
 800564a:	059a      	lsls	r2, r3, #22
 800564c:	d402      	bmi.n	8005654 <_vfiprintf_r+0x220>
 800564e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005650:	f000 fc45 	bl	8005ede <__retarget_lock_release_recursive>
 8005654:	89ab      	ldrh	r3, [r5, #12]
 8005656:	065b      	lsls	r3, r3, #25
 8005658:	f53f af12 	bmi.w	8005480 <_vfiprintf_r+0x4c>
 800565c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800565e:	e711      	b.n	8005484 <_vfiprintf_r+0x50>
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	462a      	mov	r2, r5
 8005666:	4b09      	ldr	r3, [pc, #36]	; (800568c <_vfiprintf_r+0x258>)
 8005668:	a904      	add	r1, sp, #16
 800566a:	4630      	mov	r0, r6
 800566c:	f000 f880 	bl	8005770 <_printf_i>
 8005670:	e7e4      	b.n	800563c <_vfiprintf_r+0x208>
 8005672:	bf00      	nop
 8005674:	08006414 	.word	0x08006414
 8005678:	08006434 	.word	0x08006434
 800567c:	080063f4 	.word	0x080063f4
 8005680:	080063c1 	.word	0x080063c1
 8005684:	080063cb 	.word	0x080063cb
 8005688:	00000000 	.word	0x00000000
 800568c:	0800540f 	.word	0x0800540f
 8005690:	080063c7 	.word	0x080063c7

08005694 <_printf_common>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	4616      	mov	r6, r2
 800569a:	4699      	mov	r9, r3
 800569c:	688a      	ldr	r2, [r1, #8]
 800569e:	690b      	ldr	r3, [r1, #16]
 80056a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a4:	4293      	cmp	r3, r2
 80056a6:	bfb8      	it	lt
 80056a8:	4613      	movlt	r3, r2
 80056aa:	6033      	str	r3, [r6, #0]
 80056ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b0:	4607      	mov	r7, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	b10a      	cbz	r2, 80056ba <_printf_common+0x26>
 80056b6:	3301      	adds	r3, #1
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	0699      	lsls	r1, r3, #26
 80056be:	bf42      	ittt	mi
 80056c0:	6833      	ldrmi	r3, [r6, #0]
 80056c2:	3302      	addmi	r3, #2
 80056c4:	6033      	strmi	r3, [r6, #0]
 80056c6:	6825      	ldr	r5, [r4, #0]
 80056c8:	f015 0506 	ands.w	r5, r5, #6
 80056cc:	d106      	bne.n	80056dc <_printf_common+0x48>
 80056ce:	f104 0a19 	add.w	sl, r4, #25
 80056d2:	68e3      	ldr	r3, [r4, #12]
 80056d4:	6832      	ldr	r2, [r6, #0]
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	42ab      	cmp	r3, r5
 80056da:	dc26      	bgt.n	800572a <_printf_common+0x96>
 80056dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e0:	1e13      	subs	r3, r2, #0
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	bf18      	it	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	0692      	lsls	r2, r2, #26
 80056ea:	d42b      	bmi.n	8005744 <_printf_common+0xb0>
 80056ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f0:	4649      	mov	r1, r9
 80056f2:	4638      	mov	r0, r7
 80056f4:	47c0      	blx	r8
 80056f6:	3001      	adds	r0, #1
 80056f8:	d01e      	beq.n	8005738 <_printf_common+0xa4>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	68e5      	ldr	r5, [r4, #12]
 80056fe:	6832      	ldr	r2, [r6, #0]
 8005700:	f003 0306 	and.w	r3, r3, #6
 8005704:	2b04      	cmp	r3, #4
 8005706:	bf08      	it	eq
 8005708:	1aad      	subeq	r5, r5, r2
 800570a:	68a3      	ldr	r3, [r4, #8]
 800570c:	6922      	ldr	r2, [r4, #16]
 800570e:	bf0c      	ite	eq
 8005710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005714:	2500      	movne	r5, #0
 8005716:	4293      	cmp	r3, r2
 8005718:	bfc4      	itt	gt
 800571a:	1a9b      	subgt	r3, r3, r2
 800571c:	18ed      	addgt	r5, r5, r3
 800571e:	2600      	movs	r6, #0
 8005720:	341a      	adds	r4, #26
 8005722:	42b5      	cmp	r5, r6
 8005724:	d11a      	bne.n	800575c <_printf_common+0xc8>
 8005726:	2000      	movs	r0, #0
 8005728:	e008      	b.n	800573c <_printf_common+0xa8>
 800572a:	2301      	movs	r3, #1
 800572c:	4652      	mov	r2, sl
 800572e:	4649      	mov	r1, r9
 8005730:	4638      	mov	r0, r7
 8005732:	47c0      	blx	r8
 8005734:	3001      	adds	r0, #1
 8005736:	d103      	bne.n	8005740 <_printf_common+0xac>
 8005738:	f04f 30ff 	mov.w	r0, #4294967295
 800573c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005740:	3501      	adds	r5, #1
 8005742:	e7c6      	b.n	80056d2 <_printf_common+0x3e>
 8005744:	18e1      	adds	r1, r4, r3
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	2030      	movs	r0, #48	; 0x30
 800574a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800574e:	4422      	add	r2, r4
 8005750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005758:	3302      	adds	r3, #2
 800575a:	e7c7      	b.n	80056ec <_printf_common+0x58>
 800575c:	2301      	movs	r3, #1
 800575e:	4622      	mov	r2, r4
 8005760:	4649      	mov	r1, r9
 8005762:	4638      	mov	r0, r7
 8005764:	47c0      	blx	r8
 8005766:	3001      	adds	r0, #1
 8005768:	d0e6      	beq.n	8005738 <_printf_common+0xa4>
 800576a:	3601      	adds	r6, #1
 800576c:	e7d9      	b.n	8005722 <_printf_common+0x8e>
	...

08005770 <_printf_i>:
 8005770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005774:	7e0f      	ldrb	r7, [r1, #24]
 8005776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005778:	2f78      	cmp	r7, #120	; 0x78
 800577a:	4691      	mov	r9, r2
 800577c:	4680      	mov	r8, r0
 800577e:	460c      	mov	r4, r1
 8005780:	469a      	mov	sl, r3
 8005782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005786:	d807      	bhi.n	8005798 <_printf_i+0x28>
 8005788:	2f62      	cmp	r7, #98	; 0x62
 800578a:	d80a      	bhi.n	80057a2 <_printf_i+0x32>
 800578c:	2f00      	cmp	r7, #0
 800578e:	f000 80d8 	beq.w	8005942 <_printf_i+0x1d2>
 8005792:	2f58      	cmp	r7, #88	; 0x58
 8005794:	f000 80a3 	beq.w	80058de <_printf_i+0x16e>
 8005798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800579c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a0:	e03a      	b.n	8005818 <_printf_i+0xa8>
 80057a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057a6:	2b15      	cmp	r3, #21
 80057a8:	d8f6      	bhi.n	8005798 <_printf_i+0x28>
 80057aa:	a101      	add	r1, pc, #4	; (adr r1, 80057b0 <_printf_i+0x40>)
 80057ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b0:	08005809 	.word	0x08005809
 80057b4:	0800581d 	.word	0x0800581d
 80057b8:	08005799 	.word	0x08005799
 80057bc:	08005799 	.word	0x08005799
 80057c0:	08005799 	.word	0x08005799
 80057c4:	08005799 	.word	0x08005799
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	08005799 	.word	0x08005799
 80057d0:	08005799 	.word	0x08005799
 80057d4:	08005799 	.word	0x08005799
 80057d8:	08005799 	.word	0x08005799
 80057dc:	08005929 	.word	0x08005929
 80057e0:	0800584d 	.word	0x0800584d
 80057e4:	0800590b 	.word	0x0800590b
 80057e8:	08005799 	.word	0x08005799
 80057ec:	08005799 	.word	0x08005799
 80057f0:	0800594b 	.word	0x0800594b
 80057f4:	08005799 	.word	0x08005799
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	08005799 	.word	0x08005799
 8005800:	08005799 	.word	0x08005799
 8005804:	08005913 	.word	0x08005913
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	1d1a      	adds	r2, r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	602a      	str	r2, [r5, #0]
 8005810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005818:	2301      	movs	r3, #1
 800581a:	e0a3      	b.n	8005964 <_printf_i+0x1f4>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	6829      	ldr	r1, [r5, #0]
 8005820:	0606      	lsls	r6, r0, #24
 8005822:	f101 0304 	add.w	r3, r1, #4
 8005826:	d50a      	bpl.n	800583e <_printf_i+0xce>
 8005828:	680e      	ldr	r6, [r1, #0]
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	2e00      	cmp	r6, #0
 800582e:	da03      	bge.n	8005838 <_printf_i+0xc8>
 8005830:	232d      	movs	r3, #45	; 0x2d
 8005832:	4276      	negs	r6, r6
 8005834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005838:	485e      	ldr	r0, [pc, #376]	; (80059b4 <_printf_i+0x244>)
 800583a:	230a      	movs	r3, #10
 800583c:	e019      	b.n	8005872 <_printf_i+0x102>
 800583e:	680e      	ldr	r6, [r1, #0]
 8005840:	602b      	str	r3, [r5, #0]
 8005842:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005846:	bf18      	it	ne
 8005848:	b236      	sxthne	r6, r6
 800584a:	e7ef      	b.n	800582c <_printf_i+0xbc>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	1d19      	adds	r1, r3, #4
 8005852:	6029      	str	r1, [r5, #0]
 8005854:	0601      	lsls	r1, r0, #24
 8005856:	d501      	bpl.n	800585c <_printf_i+0xec>
 8005858:	681e      	ldr	r6, [r3, #0]
 800585a:	e002      	b.n	8005862 <_printf_i+0xf2>
 800585c:	0646      	lsls	r6, r0, #25
 800585e:	d5fb      	bpl.n	8005858 <_printf_i+0xe8>
 8005860:	881e      	ldrh	r6, [r3, #0]
 8005862:	4854      	ldr	r0, [pc, #336]	; (80059b4 <_printf_i+0x244>)
 8005864:	2f6f      	cmp	r7, #111	; 0x6f
 8005866:	bf0c      	ite	eq
 8005868:	2308      	moveq	r3, #8
 800586a:	230a      	movne	r3, #10
 800586c:	2100      	movs	r1, #0
 800586e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005872:	6865      	ldr	r5, [r4, #4]
 8005874:	60a5      	str	r5, [r4, #8]
 8005876:	2d00      	cmp	r5, #0
 8005878:	bfa2      	ittt	ge
 800587a:	6821      	ldrge	r1, [r4, #0]
 800587c:	f021 0104 	bicge.w	r1, r1, #4
 8005880:	6021      	strge	r1, [r4, #0]
 8005882:	b90e      	cbnz	r6, 8005888 <_printf_i+0x118>
 8005884:	2d00      	cmp	r5, #0
 8005886:	d04d      	beq.n	8005924 <_printf_i+0x1b4>
 8005888:	4615      	mov	r5, r2
 800588a:	fbb6 f1f3 	udiv	r1, r6, r3
 800588e:	fb03 6711 	mls	r7, r3, r1, r6
 8005892:	5dc7      	ldrb	r7, [r0, r7]
 8005894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005898:	4637      	mov	r7, r6
 800589a:	42bb      	cmp	r3, r7
 800589c:	460e      	mov	r6, r1
 800589e:	d9f4      	bls.n	800588a <_printf_i+0x11a>
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d10b      	bne.n	80058bc <_printf_i+0x14c>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	07de      	lsls	r6, r3, #31
 80058a8:	d508      	bpl.n	80058bc <_printf_i+0x14c>
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	6861      	ldr	r1, [r4, #4]
 80058ae:	4299      	cmp	r1, r3
 80058b0:	bfde      	ittt	le
 80058b2:	2330      	movle	r3, #48	; 0x30
 80058b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058bc:	1b52      	subs	r2, r2, r5
 80058be:	6122      	str	r2, [r4, #16]
 80058c0:	f8cd a000 	str.w	sl, [sp]
 80058c4:	464b      	mov	r3, r9
 80058c6:	aa03      	add	r2, sp, #12
 80058c8:	4621      	mov	r1, r4
 80058ca:	4640      	mov	r0, r8
 80058cc:	f7ff fee2 	bl	8005694 <_printf_common>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d14c      	bne.n	800596e <_printf_i+0x1fe>
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	b004      	add	sp, #16
 80058da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058de:	4835      	ldr	r0, [pc, #212]	; (80059b4 <_printf_i+0x244>)
 80058e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058e4:	6829      	ldr	r1, [r5, #0]
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80058ec:	6029      	str	r1, [r5, #0]
 80058ee:	061d      	lsls	r5, r3, #24
 80058f0:	d514      	bpl.n	800591c <_printf_i+0x1ac>
 80058f2:	07df      	lsls	r7, r3, #31
 80058f4:	bf44      	itt	mi
 80058f6:	f043 0320 	orrmi.w	r3, r3, #32
 80058fa:	6023      	strmi	r3, [r4, #0]
 80058fc:	b91e      	cbnz	r6, 8005906 <_printf_i+0x196>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	f023 0320 	bic.w	r3, r3, #32
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	2310      	movs	r3, #16
 8005908:	e7b0      	b.n	800586c <_printf_i+0xfc>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	f043 0320 	orr.w	r3, r3, #32
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	2378      	movs	r3, #120	; 0x78
 8005914:	4828      	ldr	r0, [pc, #160]	; (80059b8 <_printf_i+0x248>)
 8005916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800591a:	e7e3      	b.n	80058e4 <_printf_i+0x174>
 800591c:	0659      	lsls	r1, r3, #25
 800591e:	bf48      	it	mi
 8005920:	b2b6      	uxthmi	r6, r6
 8005922:	e7e6      	b.n	80058f2 <_printf_i+0x182>
 8005924:	4615      	mov	r5, r2
 8005926:	e7bb      	b.n	80058a0 <_printf_i+0x130>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	6826      	ldr	r6, [r4, #0]
 800592c:	6961      	ldr	r1, [r4, #20]
 800592e:	1d18      	adds	r0, r3, #4
 8005930:	6028      	str	r0, [r5, #0]
 8005932:	0635      	lsls	r5, r6, #24
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	d501      	bpl.n	800593c <_printf_i+0x1cc>
 8005938:	6019      	str	r1, [r3, #0]
 800593a:	e002      	b.n	8005942 <_printf_i+0x1d2>
 800593c:	0670      	lsls	r0, r6, #25
 800593e:	d5fb      	bpl.n	8005938 <_printf_i+0x1c8>
 8005940:	8019      	strh	r1, [r3, #0]
 8005942:	2300      	movs	r3, #0
 8005944:	6123      	str	r3, [r4, #16]
 8005946:	4615      	mov	r5, r2
 8005948:	e7ba      	b.n	80058c0 <_printf_i+0x150>
 800594a:	682b      	ldr	r3, [r5, #0]
 800594c:	1d1a      	adds	r2, r3, #4
 800594e:	602a      	str	r2, [r5, #0]
 8005950:	681d      	ldr	r5, [r3, #0]
 8005952:	6862      	ldr	r2, [r4, #4]
 8005954:	2100      	movs	r1, #0
 8005956:	4628      	mov	r0, r5
 8005958:	f7fa fc5a 	bl	8000210 <memchr>
 800595c:	b108      	cbz	r0, 8005962 <_printf_i+0x1f2>
 800595e:	1b40      	subs	r0, r0, r5
 8005960:	6060      	str	r0, [r4, #4]
 8005962:	6863      	ldr	r3, [r4, #4]
 8005964:	6123      	str	r3, [r4, #16]
 8005966:	2300      	movs	r3, #0
 8005968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800596c:	e7a8      	b.n	80058c0 <_printf_i+0x150>
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	462a      	mov	r2, r5
 8005972:	4649      	mov	r1, r9
 8005974:	4640      	mov	r0, r8
 8005976:	47d0      	blx	sl
 8005978:	3001      	adds	r0, #1
 800597a:	d0ab      	beq.n	80058d4 <_printf_i+0x164>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	079b      	lsls	r3, r3, #30
 8005980:	d413      	bmi.n	80059aa <_printf_i+0x23a>
 8005982:	68e0      	ldr	r0, [r4, #12]
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	4298      	cmp	r0, r3
 8005988:	bfb8      	it	lt
 800598a:	4618      	movlt	r0, r3
 800598c:	e7a4      	b.n	80058d8 <_printf_i+0x168>
 800598e:	2301      	movs	r3, #1
 8005990:	4632      	mov	r2, r6
 8005992:	4649      	mov	r1, r9
 8005994:	4640      	mov	r0, r8
 8005996:	47d0      	blx	sl
 8005998:	3001      	adds	r0, #1
 800599a:	d09b      	beq.n	80058d4 <_printf_i+0x164>
 800599c:	3501      	adds	r5, #1
 800599e:	68e3      	ldr	r3, [r4, #12]
 80059a0:	9903      	ldr	r1, [sp, #12]
 80059a2:	1a5b      	subs	r3, r3, r1
 80059a4:	42ab      	cmp	r3, r5
 80059a6:	dcf2      	bgt.n	800598e <_printf_i+0x21e>
 80059a8:	e7eb      	b.n	8005982 <_printf_i+0x212>
 80059aa:	2500      	movs	r5, #0
 80059ac:	f104 0619 	add.w	r6, r4, #25
 80059b0:	e7f5      	b.n	800599e <_printf_i+0x22e>
 80059b2:	bf00      	nop
 80059b4:	080063d2 	.word	0x080063d2
 80059b8:	080063e3 	.word	0x080063e3

080059bc <_sbrk_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4d06      	ldr	r5, [pc, #24]	; (80059d8 <_sbrk_r+0x1c>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	f7fb fc58 	bl	800127c <_sbrk>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_sbrk_r+0x1a>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_sbrk_r+0x1a>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	200009b0 	.word	0x200009b0

080059dc <__swbuf_r>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	460e      	mov	r6, r1
 80059e0:	4614      	mov	r4, r2
 80059e2:	4605      	mov	r5, r0
 80059e4:	b118      	cbz	r0, 80059ee <__swbuf_r+0x12>
 80059e6:	6983      	ldr	r3, [r0, #24]
 80059e8:	b90b      	cbnz	r3, 80059ee <__swbuf_r+0x12>
 80059ea:	f000 f9d9 	bl	8005da0 <__sinit>
 80059ee:	4b21      	ldr	r3, [pc, #132]	; (8005a74 <__swbuf_r+0x98>)
 80059f0:	429c      	cmp	r4, r3
 80059f2:	d12b      	bne.n	8005a4c <__swbuf_r+0x70>
 80059f4:	686c      	ldr	r4, [r5, #4]
 80059f6:	69a3      	ldr	r3, [r4, #24]
 80059f8:	60a3      	str	r3, [r4, #8]
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	071a      	lsls	r2, r3, #28
 80059fe:	d52f      	bpl.n	8005a60 <__swbuf_r+0x84>
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	b36b      	cbz	r3, 8005a60 <__swbuf_r+0x84>
 8005a04:	6923      	ldr	r3, [r4, #16]
 8005a06:	6820      	ldr	r0, [r4, #0]
 8005a08:	1ac0      	subs	r0, r0, r3
 8005a0a:	6963      	ldr	r3, [r4, #20]
 8005a0c:	b2f6      	uxtb	r6, r6
 8005a0e:	4283      	cmp	r3, r0
 8005a10:	4637      	mov	r7, r6
 8005a12:	dc04      	bgt.n	8005a1e <__swbuf_r+0x42>
 8005a14:	4621      	mov	r1, r4
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 f92e 	bl	8005c78 <_fflush_r>
 8005a1c:	bb30      	cbnz	r0, 8005a6c <__swbuf_r+0x90>
 8005a1e:	68a3      	ldr	r3, [r4, #8]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	60a3      	str	r3, [r4, #8]
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	6022      	str	r2, [r4, #0]
 8005a2a:	701e      	strb	r6, [r3, #0]
 8005a2c:	6963      	ldr	r3, [r4, #20]
 8005a2e:	3001      	adds	r0, #1
 8005a30:	4283      	cmp	r3, r0
 8005a32:	d004      	beq.n	8005a3e <__swbuf_r+0x62>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	07db      	lsls	r3, r3, #31
 8005a38:	d506      	bpl.n	8005a48 <__swbuf_r+0x6c>
 8005a3a:	2e0a      	cmp	r6, #10
 8005a3c:	d104      	bne.n	8005a48 <__swbuf_r+0x6c>
 8005a3e:	4621      	mov	r1, r4
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 f919 	bl	8005c78 <_fflush_r>
 8005a46:	b988      	cbnz	r0, 8005a6c <__swbuf_r+0x90>
 8005a48:	4638      	mov	r0, r7
 8005a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <__swbuf_r+0x9c>)
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	d101      	bne.n	8005a56 <__swbuf_r+0x7a>
 8005a52:	68ac      	ldr	r4, [r5, #8]
 8005a54:	e7cf      	b.n	80059f6 <__swbuf_r+0x1a>
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <__swbuf_r+0xa0>)
 8005a58:	429c      	cmp	r4, r3
 8005a5a:	bf08      	it	eq
 8005a5c:	68ec      	ldreq	r4, [r5, #12]
 8005a5e:	e7ca      	b.n	80059f6 <__swbuf_r+0x1a>
 8005a60:	4621      	mov	r1, r4
 8005a62:	4628      	mov	r0, r5
 8005a64:	f000 f80c 	bl	8005a80 <__swsetup_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d0cb      	beq.n	8005a04 <__swbuf_r+0x28>
 8005a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a70:	e7ea      	b.n	8005a48 <__swbuf_r+0x6c>
 8005a72:	bf00      	nop
 8005a74:	08006414 	.word	0x08006414
 8005a78:	08006434 	.word	0x08006434
 8005a7c:	080063f4 	.word	0x080063f4

08005a80 <__swsetup_r>:
 8005a80:	4b32      	ldr	r3, [pc, #200]	; (8005b4c <__swsetup_r+0xcc>)
 8005a82:	b570      	push	{r4, r5, r6, lr}
 8005a84:	681d      	ldr	r5, [r3, #0]
 8005a86:	4606      	mov	r6, r0
 8005a88:	460c      	mov	r4, r1
 8005a8a:	b125      	cbz	r5, 8005a96 <__swsetup_r+0x16>
 8005a8c:	69ab      	ldr	r3, [r5, #24]
 8005a8e:	b913      	cbnz	r3, 8005a96 <__swsetup_r+0x16>
 8005a90:	4628      	mov	r0, r5
 8005a92:	f000 f985 	bl	8005da0 <__sinit>
 8005a96:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <__swsetup_r+0xd0>)
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	d10f      	bne.n	8005abc <__swsetup_r+0x3c>
 8005a9c:	686c      	ldr	r4, [r5, #4]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aa4:	0719      	lsls	r1, r3, #28
 8005aa6:	d42c      	bmi.n	8005b02 <__swsetup_r+0x82>
 8005aa8:	06dd      	lsls	r5, r3, #27
 8005aaa:	d411      	bmi.n	8005ad0 <__swsetup_r+0x50>
 8005aac:	2309      	movs	r3, #9
 8005aae:	6033      	str	r3, [r6, #0]
 8005ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ab4:	81a3      	strh	r3, [r4, #12]
 8005ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aba:	e03e      	b.n	8005b3a <__swsetup_r+0xba>
 8005abc:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <__swsetup_r+0xd4>)
 8005abe:	429c      	cmp	r4, r3
 8005ac0:	d101      	bne.n	8005ac6 <__swsetup_r+0x46>
 8005ac2:	68ac      	ldr	r4, [r5, #8]
 8005ac4:	e7eb      	b.n	8005a9e <__swsetup_r+0x1e>
 8005ac6:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <__swsetup_r+0xd8>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	bf08      	it	eq
 8005acc:	68ec      	ldreq	r4, [r5, #12]
 8005ace:	e7e6      	b.n	8005a9e <__swsetup_r+0x1e>
 8005ad0:	0758      	lsls	r0, r3, #29
 8005ad2:	d512      	bpl.n	8005afa <__swsetup_r+0x7a>
 8005ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ad6:	b141      	cbz	r1, 8005aea <__swsetup_r+0x6a>
 8005ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005adc:	4299      	cmp	r1, r3
 8005ade:	d002      	beq.n	8005ae6 <__swsetup_r+0x66>
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f7ff fb9d 	bl	8005220 <_free_r>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005af0:	81a3      	strh	r3, [r4, #12]
 8005af2:	2300      	movs	r3, #0
 8005af4:	6063      	str	r3, [r4, #4]
 8005af6:	6923      	ldr	r3, [r4, #16]
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	f043 0308 	orr.w	r3, r3, #8
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	b94b      	cbnz	r3, 8005b1a <__swsetup_r+0x9a>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b10:	d003      	beq.n	8005b1a <__swsetup_r+0x9a>
 8005b12:	4621      	mov	r1, r4
 8005b14:	4630      	mov	r0, r6
 8005b16:	f000 fa09 	bl	8005f2c <__smakebuf_r>
 8005b1a:	89a0      	ldrh	r0, [r4, #12]
 8005b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b20:	f010 0301 	ands.w	r3, r0, #1
 8005b24:	d00a      	beq.n	8005b3c <__swsetup_r+0xbc>
 8005b26:	2300      	movs	r3, #0
 8005b28:	60a3      	str	r3, [r4, #8]
 8005b2a:	6963      	ldr	r3, [r4, #20]
 8005b2c:	425b      	negs	r3, r3
 8005b2e:	61a3      	str	r3, [r4, #24]
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	b943      	cbnz	r3, 8005b46 <__swsetup_r+0xc6>
 8005b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b38:	d1ba      	bne.n	8005ab0 <__swsetup_r+0x30>
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	0781      	lsls	r1, r0, #30
 8005b3e:	bf58      	it	pl
 8005b40:	6963      	ldrpl	r3, [r4, #20]
 8005b42:	60a3      	str	r3, [r4, #8]
 8005b44:	e7f4      	b.n	8005b30 <__swsetup_r+0xb0>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e7f7      	b.n	8005b3a <__swsetup_r+0xba>
 8005b4a:	bf00      	nop
 8005b4c:	2000000c 	.word	0x2000000c
 8005b50:	08006414 	.word	0x08006414
 8005b54:	08006434 	.word	0x08006434
 8005b58:	080063f4 	.word	0x080063f4

08005b5c <abort>:
 8005b5c:	b508      	push	{r3, lr}
 8005b5e:	2006      	movs	r0, #6
 8005b60:	f000 fa58 	bl	8006014 <raise>
 8005b64:	2001      	movs	r0, #1
 8005b66:	f7fb fb11 	bl	800118c <_exit>
	...

08005b6c <__sflush_r>:
 8005b6c:	898a      	ldrh	r2, [r1, #12]
 8005b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b72:	4605      	mov	r5, r0
 8005b74:	0710      	lsls	r0, r2, #28
 8005b76:	460c      	mov	r4, r1
 8005b78:	d458      	bmi.n	8005c2c <__sflush_r+0xc0>
 8005b7a:	684b      	ldr	r3, [r1, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	dc05      	bgt.n	8005b8c <__sflush_r+0x20>
 8005b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	dc02      	bgt.n	8005b8c <__sflush_r+0x20>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b8e:	2e00      	cmp	r6, #0
 8005b90:	d0f9      	beq.n	8005b86 <__sflush_r+0x1a>
 8005b92:	2300      	movs	r3, #0
 8005b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b98:	682f      	ldr	r7, [r5, #0]
 8005b9a:	602b      	str	r3, [r5, #0]
 8005b9c:	d032      	beq.n	8005c04 <__sflush_r+0x98>
 8005b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	075a      	lsls	r2, r3, #29
 8005ba4:	d505      	bpl.n	8005bb2 <__sflush_r+0x46>
 8005ba6:	6863      	ldr	r3, [r4, #4]
 8005ba8:	1ac0      	subs	r0, r0, r3
 8005baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bac:	b10b      	cbz	r3, 8005bb2 <__sflush_r+0x46>
 8005bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bb0:	1ac0      	subs	r0, r0, r3
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb8:	6a21      	ldr	r1, [r4, #32]
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b0      	blx	r6
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	d106      	bne.n	8005bd2 <__sflush_r+0x66>
 8005bc4:	6829      	ldr	r1, [r5, #0]
 8005bc6:	291d      	cmp	r1, #29
 8005bc8:	d82c      	bhi.n	8005c24 <__sflush_r+0xb8>
 8005bca:	4a2a      	ldr	r2, [pc, #168]	; (8005c74 <__sflush_r+0x108>)
 8005bcc:	40ca      	lsrs	r2, r1
 8005bce:	07d6      	lsls	r6, r2, #31
 8005bd0:	d528      	bpl.n	8005c24 <__sflush_r+0xb8>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	6062      	str	r2, [r4, #4]
 8005bd6:	04d9      	lsls	r1, r3, #19
 8005bd8:	6922      	ldr	r2, [r4, #16]
 8005bda:	6022      	str	r2, [r4, #0]
 8005bdc:	d504      	bpl.n	8005be8 <__sflush_r+0x7c>
 8005bde:	1c42      	adds	r2, r0, #1
 8005be0:	d101      	bne.n	8005be6 <__sflush_r+0x7a>
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	b903      	cbnz	r3, 8005be8 <__sflush_r+0x7c>
 8005be6:	6560      	str	r0, [r4, #84]	; 0x54
 8005be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bea:	602f      	str	r7, [r5, #0]
 8005bec:	2900      	cmp	r1, #0
 8005bee:	d0ca      	beq.n	8005b86 <__sflush_r+0x1a>
 8005bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	d002      	beq.n	8005bfe <__sflush_r+0x92>
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f7ff fb11 	bl	8005220 <_free_r>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	6360      	str	r0, [r4, #52]	; 0x34
 8005c02:	e7c1      	b.n	8005b88 <__sflush_r+0x1c>
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	2301      	movs	r3, #1
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b0      	blx	r6
 8005c0c:	1c41      	adds	r1, r0, #1
 8005c0e:	d1c7      	bne.n	8005ba0 <__sflush_r+0x34>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0c4      	beq.n	8005ba0 <__sflush_r+0x34>
 8005c16:	2b1d      	cmp	r3, #29
 8005c18:	d001      	beq.n	8005c1e <__sflush_r+0xb2>
 8005c1a:	2b16      	cmp	r3, #22
 8005c1c:	d101      	bne.n	8005c22 <__sflush_r+0xb6>
 8005c1e:	602f      	str	r7, [r5, #0]
 8005c20:	e7b1      	b.n	8005b86 <__sflush_r+0x1a>
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	e7ad      	b.n	8005b88 <__sflush_r+0x1c>
 8005c2c:	690f      	ldr	r7, [r1, #16]
 8005c2e:	2f00      	cmp	r7, #0
 8005c30:	d0a9      	beq.n	8005b86 <__sflush_r+0x1a>
 8005c32:	0793      	lsls	r3, r2, #30
 8005c34:	680e      	ldr	r6, [r1, #0]
 8005c36:	bf08      	it	eq
 8005c38:	694b      	ldreq	r3, [r1, #20]
 8005c3a:	600f      	str	r7, [r1, #0]
 8005c3c:	bf18      	it	ne
 8005c3e:	2300      	movne	r3, #0
 8005c40:	eba6 0807 	sub.w	r8, r6, r7
 8005c44:	608b      	str	r3, [r1, #8]
 8005c46:	f1b8 0f00 	cmp.w	r8, #0
 8005c4a:	dd9c      	ble.n	8005b86 <__sflush_r+0x1a>
 8005c4c:	6a21      	ldr	r1, [r4, #32]
 8005c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c50:	4643      	mov	r3, r8
 8005c52:	463a      	mov	r2, r7
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b0      	blx	r6
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	dc06      	bgt.n	8005c6a <__sflush_r+0xfe>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	e78e      	b.n	8005b88 <__sflush_r+0x1c>
 8005c6a:	4407      	add	r7, r0
 8005c6c:	eba8 0800 	sub.w	r8, r8, r0
 8005c70:	e7e9      	b.n	8005c46 <__sflush_r+0xda>
 8005c72:	bf00      	nop
 8005c74:	20400001 	.word	0x20400001

08005c78 <_fflush_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	690b      	ldr	r3, [r1, #16]
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	b913      	cbnz	r3, 8005c88 <_fflush_r+0x10>
 8005c82:	2500      	movs	r5, #0
 8005c84:	4628      	mov	r0, r5
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	b118      	cbz	r0, 8005c92 <_fflush_r+0x1a>
 8005c8a:	6983      	ldr	r3, [r0, #24]
 8005c8c:	b90b      	cbnz	r3, 8005c92 <_fflush_r+0x1a>
 8005c8e:	f000 f887 	bl	8005da0 <__sinit>
 8005c92:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <_fflush_r+0x6c>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	d11b      	bne.n	8005cd0 <_fflush_r+0x58>
 8005c98:	686c      	ldr	r4, [r5, #4]
 8005c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0ef      	beq.n	8005c82 <_fflush_r+0xa>
 8005ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ca4:	07d0      	lsls	r0, r2, #31
 8005ca6:	d404      	bmi.n	8005cb2 <_fflush_r+0x3a>
 8005ca8:	0599      	lsls	r1, r3, #22
 8005caa:	d402      	bmi.n	8005cb2 <_fflush_r+0x3a>
 8005cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cae:	f000 f915 	bl	8005edc <__retarget_lock_acquire_recursive>
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	f7ff ff59 	bl	8005b6c <__sflush_r>
 8005cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cbc:	07da      	lsls	r2, r3, #31
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	d4e0      	bmi.n	8005c84 <_fflush_r+0xc>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	059b      	lsls	r3, r3, #22
 8005cc6:	d4dd      	bmi.n	8005c84 <_fflush_r+0xc>
 8005cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cca:	f000 f908 	bl	8005ede <__retarget_lock_release_recursive>
 8005cce:	e7d9      	b.n	8005c84 <_fflush_r+0xc>
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <_fflush_r+0x70>)
 8005cd2:	429c      	cmp	r4, r3
 8005cd4:	d101      	bne.n	8005cda <_fflush_r+0x62>
 8005cd6:	68ac      	ldr	r4, [r5, #8]
 8005cd8:	e7df      	b.n	8005c9a <_fflush_r+0x22>
 8005cda:	4b04      	ldr	r3, [pc, #16]	; (8005cec <_fflush_r+0x74>)
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	bf08      	it	eq
 8005ce0:	68ec      	ldreq	r4, [r5, #12]
 8005ce2:	e7da      	b.n	8005c9a <_fflush_r+0x22>
 8005ce4:	08006414 	.word	0x08006414
 8005ce8:	08006434 	.word	0x08006434
 8005cec:	080063f4 	.word	0x080063f4

08005cf0 <std>:
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	b510      	push	{r4, lr}
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cfe:	6083      	str	r3, [r0, #8]
 8005d00:	8181      	strh	r1, [r0, #12]
 8005d02:	6643      	str	r3, [r0, #100]	; 0x64
 8005d04:	81c2      	strh	r2, [r0, #14]
 8005d06:	6183      	str	r3, [r0, #24]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	2208      	movs	r2, #8
 8005d0c:	305c      	adds	r0, #92	; 0x5c
 8005d0e:	f7ff f951 	bl	8004fb4 <memset>
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <std+0x38>)
 8005d14:	6263      	str	r3, [r4, #36]	; 0x24
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <std+0x3c>)
 8005d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <std+0x40>)
 8005d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <std+0x44>)
 8005d20:	6224      	str	r4, [r4, #32]
 8005d22:	6323      	str	r3, [r4, #48]	; 0x30
 8005d24:	bd10      	pop	{r4, pc}
 8005d26:	bf00      	nop
 8005d28:	0800604d 	.word	0x0800604d
 8005d2c:	0800606f 	.word	0x0800606f
 8005d30:	080060a7 	.word	0x080060a7
 8005d34:	080060cb 	.word	0x080060cb

08005d38 <_cleanup_r>:
 8005d38:	4901      	ldr	r1, [pc, #4]	; (8005d40 <_cleanup_r+0x8>)
 8005d3a:	f000 b8af 	b.w	8005e9c <_fwalk_reent>
 8005d3e:	bf00      	nop
 8005d40:	08005c79 	.word	0x08005c79

08005d44 <__sfmoreglue>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	2268      	movs	r2, #104	; 0x68
 8005d48:	1e4d      	subs	r5, r1, #1
 8005d4a:	4355      	muls	r5, r2
 8005d4c:	460e      	mov	r6, r1
 8005d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d52:	f7ff fad1 	bl	80052f8 <_malloc_r>
 8005d56:	4604      	mov	r4, r0
 8005d58:	b140      	cbz	r0, 8005d6c <__sfmoreglue+0x28>
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8005d60:	300c      	adds	r0, #12
 8005d62:	60a0      	str	r0, [r4, #8]
 8005d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d68:	f7ff f924 	bl	8004fb4 <memset>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}

08005d70 <__sfp_lock_acquire>:
 8005d70:	4801      	ldr	r0, [pc, #4]	; (8005d78 <__sfp_lock_acquire+0x8>)
 8005d72:	f000 b8b3 	b.w	8005edc <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	200009ad 	.word	0x200009ad

08005d7c <__sfp_lock_release>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__sfp_lock_release+0x8>)
 8005d7e:	f000 b8ae 	b.w	8005ede <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	200009ad 	.word	0x200009ad

08005d88 <__sinit_lock_acquire>:
 8005d88:	4801      	ldr	r0, [pc, #4]	; (8005d90 <__sinit_lock_acquire+0x8>)
 8005d8a:	f000 b8a7 	b.w	8005edc <__retarget_lock_acquire_recursive>
 8005d8e:	bf00      	nop
 8005d90:	200009ae 	.word	0x200009ae

08005d94 <__sinit_lock_release>:
 8005d94:	4801      	ldr	r0, [pc, #4]	; (8005d9c <__sinit_lock_release+0x8>)
 8005d96:	f000 b8a2 	b.w	8005ede <__retarget_lock_release_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	200009ae 	.word	0x200009ae

08005da0 <__sinit>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	4604      	mov	r4, r0
 8005da4:	f7ff fff0 	bl	8005d88 <__sinit_lock_acquire>
 8005da8:	69a3      	ldr	r3, [r4, #24]
 8005daa:	b11b      	cbz	r3, 8005db4 <__sinit+0x14>
 8005dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db0:	f7ff bff0 	b.w	8005d94 <__sinit_lock_release>
 8005db4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005db8:	6523      	str	r3, [r4, #80]	; 0x50
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <__sinit+0x68>)
 8005dbc:	4a13      	ldr	r2, [pc, #76]	; (8005e0c <__sinit+0x6c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005dc2:	42a3      	cmp	r3, r4
 8005dc4:	bf04      	itt	eq
 8005dc6:	2301      	moveq	r3, #1
 8005dc8:	61a3      	streq	r3, [r4, #24]
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 f820 	bl	8005e10 <__sfp>
 8005dd0:	6060      	str	r0, [r4, #4]
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 f81c 	bl	8005e10 <__sfp>
 8005dd8:	60a0      	str	r0, [r4, #8]
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f000 f818 	bl	8005e10 <__sfp>
 8005de0:	2200      	movs	r2, #0
 8005de2:	60e0      	str	r0, [r4, #12]
 8005de4:	2104      	movs	r1, #4
 8005de6:	6860      	ldr	r0, [r4, #4]
 8005de8:	f7ff ff82 	bl	8005cf0 <std>
 8005dec:	68a0      	ldr	r0, [r4, #8]
 8005dee:	2201      	movs	r2, #1
 8005df0:	2109      	movs	r1, #9
 8005df2:	f7ff ff7d 	bl	8005cf0 <std>
 8005df6:	68e0      	ldr	r0, [r4, #12]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	2112      	movs	r1, #18
 8005dfc:	f7ff ff78 	bl	8005cf0 <std>
 8005e00:	2301      	movs	r3, #1
 8005e02:	61a3      	str	r3, [r4, #24]
 8005e04:	e7d2      	b.n	8005dac <__sinit+0xc>
 8005e06:	bf00      	nop
 8005e08:	0800620c 	.word	0x0800620c
 8005e0c:	08005d39 	.word	0x08005d39

08005e10 <__sfp>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	4607      	mov	r7, r0
 8005e14:	f7ff ffac 	bl	8005d70 <__sfp_lock_acquire>
 8005e18:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <__sfp+0x84>)
 8005e1a:	681e      	ldr	r6, [r3, #0]
 8005e1c:	69b3      	ldr	r3, [r6, #24]
 8005e1e:	b913      	cbnz	r3, 8005e26 <__sfp+0x16>
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7ff ffbd 	bl	8005da0 <__sinit>
 8005e26:	3648      	adds	r6, #72	; 0x48
 8005e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	d503      	bpl.n	8005e38 <__sfp+0x28>
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	b30b      	cbz	r3, 8005e78 <__sfp+0x68>
 8005e34:	6836      	ldr	r6, [r6, #0]
 8005e36:	e7f7      	b.n	8005e28 <__sfp+0x18>
 8005e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e3c:	b9d5      	cbnz	r5, 8005e74 <__sfp+0x64>
 8005e3e:	4b16      	ldr	r3, [pc, #88]	; (8005e98 <__sfp+0x88>)
 8005e40:	60e3      	str	r3, [r4, #12]
 8005e42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e46:	6665      	str	r5, [r4, #100]	; 0x64
 8005e48:	f000 f847 	bl	8005eda <__retarget_lock_init_recursive>
 8005e4c:	f7ff ff96 	bl	8005d7c <__sfp_lock_release>
 8005e50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e58:	6025      	str	r5, [r4, #0]
 8005e5a:	61a5      	str	r5, [r4, #24]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	4629      	mov	r1, r5
 8005e60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e64:	f7ff f8a6 	bl	8004fb4 <memset>
 8005e68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e70:	4620      	mov	r0, r4
 8005e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e74:	3468      	adds	r4, #104	; 0x68
 8005e76:	e7d9      	b.n	8005e2c <__sfp+0x1c>
 8005e78:	2104      	movs	r1, #4
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	f7ff ff62 	bl	8005d44 <__sfmoreglue>
 8005e80:	4604      	mov	r4, r0
 8005e82:	6030      	str	r0, [r6, #0]
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d1d5      	bne.n	8005e34 <__sfp+0x24>
 8005e88:	f7ff ff78 	bl	8005d7c <__sfp_lock_release>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	e7ee      	b.n	8005e70 <__sfp+0x60>
 8005e92:	bf00      	nop
 8005e94:	0800620c 	.word	0x0800620c
 8005e98:	ffff0001 	.word	0xffff0001

08005e9c <_fwalk_reent>:
 8005e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	4688      	mov	r8, r1
 8005ea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ea8:	2700      	movs	r7, #0
 8005eaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eae:	f1b9 0901 	subs.w	r9, r9, #1
 8005eb2:	d505      	bpl.n	8005ec0 <_fwalk_reent+0x24>
 8005eb4:	6824      	ldr	r4, [r4, #0]
 8005eb6:	2c00      	cmp	r4, #0
 8005eb8:	d1f7      	bne.n	8005eaa <_fwalk_reent+0xe>
 8005eba:	4638      	mov	r0, r7
 8005ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec0:	89ab      	ldrh	r3, [r5, #12]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d907      	bls.n	8005ed6 <_fwalk_reent+0x3a>
 8005ec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	d003      	beq.n	8005ed6 <_fwalk_reent+0x3a>
 8005ece:	4629      	mov	r1, r5
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	47c0      	blx	r8
 8005ed4:	4307      	orrs	r7, r0
 8005ed6:	3568      	adds	r5, #104	; 0x68
 8005ed8:	e7e9      	b.n	8005eae <_fwalk_reent+0x12>

08005eda <__retarget_lock_init_recursive>:
 8005eda:	4770      	bx	lr

08005edc <__retarget_lock_acquire_recursive>:
 8005edc:	4770      	bx	lr

08005ede <__retarget_lock_release_recursive>:
 8005ede:	4770      	bx	lr

08005ee0 <__swhatbuf_r>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	460e      	mov	r6, r1
 8005ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	b096      	sub	sp, #88	; 0x58
 8005eec:	4614      	mov	r4, r2
 8005eee:	461d      	mov	r5, r3
 8005ef0:	da08      	bge.n	8005f04 <__swhatbuf_r+0x24>
 8005ef2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	602a      	str	r2, [r5, #0]
 8005efa:	061a      	lsls	r2, r3, #24
 8005efc:	d410      	bmi.n	8005f20 <__swhatbuf_r+0x40>
 8005efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f02:	e00e      	b.n	8005f22 <__swhatbuf_r+0x42>
 8005f04:	466a      	mov	r2, sp
 8005f06:	f000 f907 	bl	8006118 <_fstat_r>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	dbf1      	blt.n	8005ef2 <__swhatbuf_r+0x12>
 8005f0e:	9a01      	ldr	r2, [sp, #4]
 8005f10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f18:	425a      	negs	r2, r3
 8005f1a:	415a      	adcs	r2, r3
 8005f1c:	602a      	str	r2, [r5, #0]
 8005f1e:	e7ee      	b.n	8005efe <__swhatbuf_r+0x1e>
 8005f20:	2340      	movs	r3, #64	; 0x40
 8005f22:	2000      	movs	r0, #0
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	b016      	add	sp, #88	; 0x58
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f2c <__smakebuf_r>:
 8005f2c:	898b      	ldrh	r3, [r1, #12]
 8005f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f30:	079d      	lsls	r5, r3, #30
 8005f32:	4606      	mov	r6, r0
 8005f34:	460c      	mov	r4, r1
 8005f36:	d507      	bpl.n	8005f48 <__smakebuf_r+0x1c>
 8005f38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	2301      	movs	r3, #1
 8005f42:	6163      	str	r3, [r4, #20]
 8005f44:	b002      	add	sp, #8
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	ab01      	add	r3, sp, #4
 8005f4a:	466a      	mov	r2, sp
 8005f4c:	f7ff ffc8 	bl	8005ee0 <__swhatbuf_r>
 8005f50:	9900      	ldr	r1, [sp, #0]
 8005f52:	4605      	mov	r5, r0
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7ff f9cf 	bl	80052f8 <_malloc_r>
 8005f5a:	b948      	cbnz	r0, 8005f70 <__smakebuf_r+0x44>
 8005f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f60:	059a      	lsls	r2, r3, #22
 8005f62:	d4ef      	bmi.n	8005f44 <__smakebuf_r+0x18>
 8005f64:	f023 0303 	bic.w	r3, r3, #3
 8005f68:	f043 0302 	orr.w	r3, r3, #2
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	e7e3      	b.n	8005f38 <__smakebuf_r+0xc>
 8005f70:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <__smakebuf_r+0x7c>)
 8005f72:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	6020      	str	r0, [r4, #0]
 8005f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	9b00      	ldr	r3, [sp, #0]
 8005f80:	6163      	str	r3, [r4, #20]
 8005f82:	9b01      	ldr	r3, [sp, #4]
 8005f84:	6120      	str	r0, [r4, #16]
 8005f86:	b15b      	cbz	r3, 8005fa0 <__smakebuf_r+0x74>
 8005f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f000 f8d5 	bl	800613c <_isatty_r>
 8005f92:	b128      	cbz	r0, 8005fa0 <__smakebuf_r+0x74>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	89a0      	ldrh	r0, [r4, #12]
 8005fa2:	4305      	orrs	r5, r0
 8005fa4:	81a5      	strh	r5, [r4, #12]
 8005fa6:	e7cd      	b.n	8005f44 <__smakebuf_r+0x18>
 8005fa8:	08005d39 	.word	0x08005d39

08005fac <__malloc_lock>:
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <__malloc_lock+0x8>)
 8005fae:	f7ff bf95 	b.w	8005edc <__retarget_lock_acquire_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	200009ac 	.word	0x200009ac

08005fb8 <__malloc_unlock>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	; (8005fc0 <__malloc_unlock+0x8>)
 8005fba:	f7ff bf90 	b.w	8005ede <__retarget_lock_release_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	200009ac 	.word	0x200009ac

08005fc4 <_raise_r>:
 8005fc4:	291f      	cmp	r1, #31
 8005fc6:	b538      	push	{r3, r4, r5, lr}
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	d904      	bls.n	8005fd8 <_raise_r+0x14>
 8005fce:	2316      	movs	r3, #22
 8005fd0:	6003      	str	r3, [r0, #0]
 8005fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fda:	b112      	cbz	r2, 8005fe2 <_raise_r+0x1e>
 8005fdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fe0:	b94b      	cbnz	r3, 8005ff6 <_raise_r+0x32>
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 f830 	bl	8006048 <_getpid_r>
 8005fe8:	462a      	mov	r2, r5
 8005fea:	4601      	mov	r1, r0
 8005fec:	4620      	mov	r0, r4
 8005fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ff2:	f000 b817 	b.w	8006024 <_kill_r>
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d00a      	beq.n	8006010 <_raise_r+0x4c>
 8005ffa:	1c59      	adds	r1, r3, #1
 8005ffc:	d103      	bne.n	8006006 <_raise_r+0x42>
 8005ffe:	2316      	movs	r3, #22
 8006000:	6003      	str	r3, [r0, #0]
 8006002:	2001      	movs	r0, #1
 8006004:	e7e7      	b.n	8005fd6 <_raise_r+0x12>
 8006006:	2400      	movs	r4, #0
 8006008:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800600c:	4628      	mov	r0, r5
 800600e:	4798      	blx	r3
 8006010:	2000      	movs	r0, #0
 8006012:	e7e0      	b.n	8005fd6 <_raise_r+0x12>

08006014 <raise>:
 8006014:	4b02      	ldr	r3, [pc, #8]	; (8006020 <raise+0xc>)
 8006016:	4601      	mov	r1, r0
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	f7ff bfd3 	b.w	8005fc4 <_raise_r>
 800601e:	bf00      	nop
 8006020:	2000000c 	.word	0x2000000c

08006024 <_kill_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	4d07      	ldr	r5, [pc, #28]	; (8006044 <_kill_r+0x20>)
 8006028:	2300      	movs	r3, #0
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	602b      	str	r3, [r5, #0]
 8006032:	f7fb f89b 	bl	800116c <_kill>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d102      	bne.n	8006040 <_kill_r+0x1c>
 800603a:	682b      	ldr	r3, [r5, #0]
 800603c:	b103      	cbz	r3, 8006040 <_kill_r+0x1c>
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	bd38      	pop	{r3, r4, r5, pc}
 8006042:	bf00      	nop
 8006044:	200009b0 	.word	0x200009b0

08006048 <_getpid_r>:
 8006048:	f7fb b888 	b.w	800115c <_getpid>

0800604c <__sread>:
 800604c:	b510      	push	{r4, lr}
 800604e:	460c      	mov	r4, r1
 8006050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006054:	f000 f894 	bl	8006180 <_read_r>
 8006058:	2800      	cmp	r0, #0
 800605a:	bfab      	itete	ge
 800605c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800605e:	89a3      	ldrhlt	r3, [r4, #12]
 8006060:	181b      	addge	r3, r3, r0
 8006062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006066:	bfac      	ite	ge
 8006068:	6563      	strge	r3, [r4, #84]	; 0x54
 800606a:	81a3      	strhlt	r3, [r4, #12]
 800606c:	bd10      	pop	{r4, pc}

0800606e <__swrite>:
 800606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006072:	461f      	mov	r7, r3
 8006074:	898b      	ldrh	r3, [r1, #12]
 8006076:	05db      	lsls	r3, r3, #23
 8006078:	4605      	mov	r5, r0
 800607a:	460c      	mov	r4, r1
 800607c:	4616      	mov	r6, r2
 800607e:	d505      	bpl.n	800608c <__swrite+0x1e>
 8006080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006084:	2302      	movs	r3, #2
 8006086:	2200      	movs	r2, #0
 8006088:	f000 f868 	bl	800615c <_lseek_r>
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006096:	81a3      	strh	r3, [r4, #12]
 8006098:	4632      	mov	r2, r6
 800609a:	463b      	mov	r3, r7
 800609c:	4628      	mov	r0, r5
 800609e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060a2:	f000 b817 	b.w	80060d4 <_write_r>

080060a6 <__sseek>:
 80060a6:	b510      	push	{r4, lr}
 80060a8:	460c      	mov	r4, r1
 80060aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ae:	f000 f855 	bl	800615c <_lseek_r>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	bf15      	itete	ne
 80060b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80060ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060c2:	81a3      	strheq	r3, [r4, #12]
 80060c4:	bf18      	it	ne
 80060c6:	81a3      	strhne	r3, [r4, #12]
 80060c8:	bd10      	pop	{r4, pc}

080060ca <__sclose>:
 80060ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ce:	f000 b813 	b.w	80060f8 <_close_r>
	...

080060d4 <_write_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d07      	ldr	r5, [pc, #28]	; (80060f4 <_write_r+0x20>)
 80060d8:	4604      	mov	r4, r0
 80060da:	4608      	mov	r0, r1
 80060dc:	4611      	mov	r1, r2
 80060de:	2200      	movs	r2, #0
 80060e0:	602a      	str	r2, [r5, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f7fb f879 	bl	80011da <_write>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d102      	bne.n	80060f2 <_write_r+0x1e>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	b103      	cbz	r3, 80060f2 <_write_r+0x1e>
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	200009b0 	.word	0x200009b0

080060f8 <_close_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4d06      	ldr	r5, [pc, #24]	; (8006114 <_close_r+0x1c>)
 80060fc:	2300      	movs	r3, #0
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fb f885 	bl	8001212 <_close>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_close_r+0x1a>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_close_r+0x1a>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	200009b0 	.word	0x200009b0

08006118 <_fstat_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d07      	ldr	r5, [pc, #28]	; (8006138 <_fstat_r+0x20>)
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	4611      	mov	r1, r2
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	f7fb f880 	bl	800122a <_fstat>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d102      	bne.n	8006134 <_fstat_r+0x1c>
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	b103      	cbz	r3, 8006134 <_fstat_r+0x1c>
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	bd38      	pop	{r3, r4, r5, pc}
 8006136:	bf00      	nop
 8006138:	200009b0 	.word	0x200009b0

0800613c <_isatty_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d06      	ldr	r5, [pc, #24]	; (8006158 <_isatty_r+0x1c>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fb f87f 	bl	800124a <_isatty>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_isatty_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_isatty_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200009b0 	.word	0x200009b0

0800615c <_lseek_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4d07      	ldr	r5, [pc, #28]	; (800617c <_lseek_r+0x20>)
 8006160:	4604      	mov	r4, r0
 8006162:	4608      	mov	r0, r1
 8006164:	4611      	mov	r1, r2
 8006166:	2200      	movs	r2, #0
 8006168:	602a      	str	r2, [r5, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	f7fb f878 	bl	8001260 <_lseek>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_lseek_r+0x1e>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_lseek_r+0x1e>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	200009b0 	.word	0x200009b0

08006180 <_read_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4d07      	ldr	r5, [pc, #28]	; (80061a0 <_read_r+0x20>)
 8006184:	4604      	mov	r4, r0
 8006186:	4608      	mov	r0, r1
 8006188:	4611      	mov	r1, r2
 800618a:	2200      	movs	r2, #0
 800618c:	602a      	str	r2, [r5, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f7fb f806 	bl	80011a0 <_read>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d102      	bne.n	800619e <_read_r+0x1e>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	b103      	cbz	r3, 800619e <_read_r+0x1e>
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	200009b0 	.word	0x200009b0

080061a4 <_init>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	bf00      	nop
 80061a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061aa:	bc08      	pop	{r3}
 80061ac:	469e      	mov	lr, r3
 80061ae:	4770      	bx	lr

080061b0 <_fini>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr
